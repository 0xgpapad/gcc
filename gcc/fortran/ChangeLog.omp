2020-08-21  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-08-04  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.c (gfc_trans_omp_do): Fix 'lastprivate(conditional:'.

2020-08-21  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-07-23  Tobias Burnus  <tobias@codesourcery.com>

	* gfortran.h (gfc_omp_namelist): Add lastprivate_conditional.
	* openmp.c (gfc_match_omp_clauses): Handle 'conditional:'
	modifier of 'lastprivate'.
	* trans-openmp.c (gfc_omp_clause_default_ctor): Don't assert
	on OMP_CLAUSE__CONDTEMP_ and other OMP_*TEMP_.
	(gfc_trans_omp_variable_list): Handle lastprivate_conditional.

2020-08-21  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-08-20  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.c (gfc_match_omp_clauses): Re-order 'if' clause pasing
	to avoid creating spurious symbols.

2020-08-21  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-07-22  Tobias Burnus  <tobias@codesourcery.com>

	* gfortran.h (enum gfc_omp_if_kind): Add OMP_IF_CANCEL and OMP_IF_SIMD.
	* openmp.c (OMP_SIMD_CLAUSES): Add OMP_CLAUSE_IF.
	(gfc_match_omp_clauses, resolve_omp_clauses): Handle 'if (simd/cancel:'.
	* dump-parse-tree.c (show_omp_clauses): Likewise.
	* trans-openmp.c (gfc_trans_omp_clauses, gfc_trans_omp_cancel,
	(gfc_split_omp_clauses): Likewise.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (Fortran).

	* openmp.c (annotate_do_loops_in_kernels): Handle
	EXEC_OACC_KERNELS_LOOP separately to permit annotation of inner
	loops in a combined "acc kernels loop" directive.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* trans-openmp.c (gfc_trans_omp_do): Add combined parameter,
	use it to set OACC_LOOP_COMBINED.  Update all call sites.

2020-08-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2020-08-04  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.c (resolve_omp_do): Detect not perfectly
	nested loop with innermost collapse.

2020-08-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2020-07-21  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.c (gfc_match_omp_critical): Fix handling hints; permit
	hint clause without named critical.
	(resolve_omp_clauses): Require nonnegative constant integer
	for the hint clause.
	(gfc_resolve_omp_directive): Check for no name but
	nonzero value for hint clause.
	* parse.c (parse_omp_structured_block): Fix same-name check
	for critical.
	* trans-openmp.c (gfc_trans_omp_critical): Handle hint clause properly.

2020-08-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2020-06-25  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/95837
	* resolve.c (gfc_resolve_substring_charlen): Remove
	bogus ts.kind setting for the expression.

2020-08-14  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2020-05-15  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/94690
	* openmp.c (resolve_omp_do): Permit more clauses for SIMD
	iteration variables.

2020-08-14  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2020-05-13  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/94690
	* openmp.c (OMP_DISTRIBUTE_CLAUSES): Add OMP_CLAUSE_LASTPRIVATE.
	(gfc_resolve_do_iterator): Skip the private handling for SIMD as
	that is handled by ME code.
	* trans-openmp.c (gfc_trans_omp_do): Don't add private/lastprivate
	for dovar_found == 0, unless !simple.

2020-07-20  Frederik Harwath  <frederik@codesourcery.com>

	* openmp.c (oacc_is_parallel_or_serial): Removed function.
	(oacc_is_kernels): New function.
	(oacc_is_compute_construct): New function.
	(resolve_oacc_loop_blocks): Use "oacc_is_compute_construct"
	instead of "oacc_is_parallel_or_serial" for checking that a
	loop is not orphaned.

2020-07-14  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-07-14  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.c (gfc_match_omp_clauses): Match also derived-type
	component refs in OMP_CLAUSE_MAP.
	(resolve_omp_clauses): Resolve those.
	* trans-openmp.c (gfc_trans_omp_array_section, gfc_trans_omp_clauses):
	Handle OpenMP structure-element mapping.
	(gfc_trans_oacc_construct, gfc_trans_oacc_executable_directive,
	(gfc_trans_oacc_combined_directive, gfc_trans_oacc_declare): Update
	add openacc=true in gfc_trans_omp_clauses call.

2020-07-14  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-07-14  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/67311
	* trans-openmp.c (gfc_has_alloc_comps): Return false also for
	pointers to arrays.

2020-06-25  Tobias Burnus  <tobias@codesourcery.com>
	    Kwok Cheung Yeung  <kcy@codesourery.com>

	PR fortran/95869

	* trans-openmp.c (gfc_trans_omp_target): Use correct scoping block.

2020-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* trans-openmp.c (gfc_split_omp_clauses): Add if clause
	to target and simd sub-constructs.

2020-06-16  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline
	2020-06-16  Tobias Burnus  <tobias@codesourcery.com>

	* parse.c (decode_oacc_directive): Permit 'acc routine' also
	inside pure procedures.
	* openmp.c (gfc_match_oacc_routine): Inside pure procedures
	do not permit gang, worker or vector clauses.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>
	    Gerg√∂ Barany <gergo@codesourcery.com>

	* gfortran.h (gfc_oacc_annotate_loops_in_kernels_regions): Declare.
	* lang.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.
	* openmp.c: Include options.h.
	(enum annotation_state, enum annotation_result): New.
	(check_code_for_invalid_calls): New.
	(check_expr_for_invalid_calls): New.
	(check_for_invalid_calls): New.
	(annotate_do_loop): New.
	(annotate_do_loops_in_kernels): New.
	(compute_goto_targets): New.
	(gfc_oacc_annotate_loops_in_kernels_regions): New.
	* parse.c (gfc_parse_file): Handle -fopenacc-kernels-annotate-loops.

2020-03-13  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.c (oacc_is_serial, oacc_is_parallel_or_serial): New.
	(resolve_oacc_loop_blocks): Use oacc_is_parallel_or_serial instead of
	oacc_is_parallel.

2020-02-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.c (gfc_omp_check_optional_argument): Handle non-decl
	case.

2018-10-04  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.c (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.c (find_module_oacc_declare_clauses): Relax oacc_declare_create to
	OMP_MAP_ALLOC, and oacc_declare_copyin to OMP_MAP_TO, in order to
	match OpenACC 2.5 semantics.
	* trans-openmp.c (gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER
	(for update directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.c (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2019-07-10  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.c (gfc_omp_finish_clause): Change clauses mapping
	assumed-size arrays to use the GOMP_MAP_FORCE_PRESENT map type.

2019-05-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.c (gfc_omp_finish_clause): Guard addition of clauses for
	pointers with DECL_P.

2019-01-09  Julian Brown  <julian@codesourcery.com>

	* cpp.c (cpp_define_builtins): Update _OPENACC define to 201711.
	* gfortran.texi: Update mentions of OpenACC version to 2.6.
	* intrinsic.texi: Likewise.

2019-01-23  Thomas Schwinge  <thomas@codesourcery.com>

	* lang.opt (fopenacc-kernels): Default to "split".

2019-01-30  Thomas Schwinge  <thomas@codesourcery.com>

	* lang.opt (fopenacc-kernels): New flag.

2017-12-21  Cesar Philippidis  <cesar@codesourcery.com>

	* types.def: (BF_FN_VOID_INT_INT_OMPFN_SIZE_PTR_PTR_PTR_VAR):
	Define.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
            Nathan Sidwell  <nathan@acm.org>
            Julian Brown  <julian@codesourcery.com>

        * openmp.c (resolve_oacc_loop_blocks): Emit an error on orphan OpenACC
        gang reductions.
        * trans-openmp.c (gfc_omp_clause_copy_ctor): Permit reductions.

2018-06-29  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* openmp.c (resolve_positive_int_expr): Promote the warning to an
	error.

2018-10-02  Thomas Schwinge  <thomas@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>

	* gfortran.h (gfc_omp_clauses): Add nohost members.
	* openmp.c (omp_mask2): Add OMP_CLAUSE_NOHOST.
	(gfc_match_omp_clauses): Handle OMP_CLAUSE_NOHOST.
	(gfc_match_oacc_routine): Set oacc_function_nohost when appropriate.
	* gfortran.h (symbol_attribute): Add oacc_function_nohost member.
	* trans-openmp.c (gfc_add_omp_offload_attributes): Use it to decide
	whether to generate an OMP_CLAUSE_NOHOST clause.
	(gfc_trans_omp_clauses_1): Unreachable code to generate an
	OMP_CLAUSE_NOHOST clause.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* f95-lang.c (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
