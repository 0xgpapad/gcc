2020-08-03  Nathan Sidwell  <nathan@acm.org>

	Revert local paranoid change.
	gcc/cp/
	* cp-tree.h (build_cdtor_clones, clone_cdtor): Drop via_using parm.
	* class.c (build_cdtor_clones): Drop via_using parm.
	(clone_cdtor): Likewise.
	(clone_constructors_and_destructors): Adjust.
	* module.cc (trees_in::decl_value): Adjust build_cdtor_clones parms.

	Add private module fragment parsing (only).
	gcc/cp/
	* parser.c (enum module_preamble): Replace with ...
	(enum module_parse): Update all uses.  Add PMF values.
	(cp_parser_module_declaration): Add private-module-fragment grammar.
	gcc/testsuite/
	* g++.dg/modules/pmp-[123]{,_[ab]}.C: New.

	Fix save-temps & header-units
	gcc/cp/
	* lang-specs.h (@c++-{,system-,user-}header): Directives-only
	preprocessing for saving temps with modules.

	Merge trunk d1773f58f3a.

	Add c++-user-header c++-system-header languages.
	gcc/cp/
	* lang-specs.h (@c++-header): Map -fmodules-ts to -fmodule-header,
	inhibit PCH.
	(@c++-user-header, @c++-system-header): New.
	gcc/
	* doc/invoke.texi (C++ Modules): Document.

2020-07-31  Nathan Sidwell  <nathan@acm.org>

	Preserve reserved locations.
	gcc/cp/
	* module.cc (enum loc_kind): Add LK_RESERVED.
	(module_state::{read,write}_location): Preserve reserved
	locations.
	(module_State::{read,write}_macro_maps): Default to
	UNKNOWN_LOCATION.
	gcc/testsuite/
	* g++.dg/modules/part-mac-1_[abc].[CH]: New.

	Fix location of imports of partitions.
	* module.cc (loc_spans::maybe_propagate): New.
	(module_state::read_{ordinary,macro}_maps): Use it.
	gcc/testsuite/
	* g++.dg/modules/part-hdr-1_[abc].[CH]: New.

	Fix import location reparenting.
	gcc/cp/
	* module.cc (preprocess_module): Reparent here, if we're already
	imported.
	gcc/testsuite/
	* g++.dg/modules/reparent-1_[abc].C: New.

2020-07-30  Nathan Sidwell  <nathan@acm.org>

	Unspellable module control-line tokens.
	libcpp/
	* internal.h (struct spec_nodes): Add M__IMPORT.
	* init.c (post_options): Adjust module token spelling.
	* lex.c (cpp_maybe_module_directive): Adjust.
	* macro.c (cpp_get_token_1): Reset to zero.
	gcc/c-family/
	* c-common.c (c_common_reswords): Adjust module token spelling.
	gcc/testsuite/
	* g++.dg/modules/dir-recovery.C: New.
	* g++.dg/modules/cpp-[25]_c.C: Adjust.
	* g++.dg/modules/dep-2.C: Adjust.
	* g++.dg/modules/dir-only-[234]{,_b}.C: Adjust.
	* g++.dg/modules/inc-xlate-1_b.H: Adjust.
	* g++.dg/modules/legacy-[36]_[bcd].[HC]: Adjust.

	Fix implicit fns from modules.
	gcc/cp/
	* cp-tree.h (build_cdtor_clones): Add parms.
	* class.c (build_cdtor_clones): Swallow clone_cdtor's member insertion.
	(clone_cdtor): Move member insertion to build_cdtor_clones.
	* module.cc (trees_in::decl_value): Insert clones, if there's
	already a member vec.
	gcc/testsuite/
	* g++.dg/modules/sv-1{.h,_[ab].C}: New.

2020-07-28  Nathan Sidwell  <nathan@acm.org>

	Merge trunk f3665bd1111.

	gcc/cp/
	* class.c (layout_class_type): Restore trunk for unnamed classes.
	* cp-tree.h (lang_tree_node): Retore trunk GTY.
	(cp_tree_node_structure): Restore trunk API.
	* decl.c (cp_tree_node_structure): Restore trunk API.
	* diagnostic.c (progname): Restore trunk comment.
	gcc/
	* doc/invoke.texi (Precompiled Headers): Restore trunk index
	capitalization.
	(C++ Modules): Adjust to match.

	Merge trunk 134051f16bd.

	libcpp/
	* directives.c (_cpp_do_file_change): Check we're moving to line
	zero of the same file.

2020-07-22  Nathan Sidwell  <nathan@acm.org>

	gcc/c-family/
	* c-ada-spec.c (decl_sloc): Revert to trunk.

	Merge trunk 6e1e0decc9e.

	Unbreak Ada
	gcc/
	* gcc.c (execute): Disable argv[0] munging.

2020-07-21  Nathan Sidwell  <nathan@acm.org>

	Sadly Ada still broken :(
	gcc/c-family/
	* c-ada-spec.c (decl_sloc): Actually return the field's loc.

2020-07-20  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* rtti.c (init_rtti_processing): Unbreak bootstrap.

	Merge trunk a926eeedf43.

2020-07-17  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* files.c (_cpp_stack_file): Remove FIXME.
	* include/cpplib.h (cpp_main_loc): Declare.
	* init.c (cpp_read_main_file): Set main loc.
	(cpp_main_loc): New.
	* internal.h (struct cpp_reader): Add main_loc.
	gcc/cp/
	* module.cc (main_source_loc): Delete.
	(module_translate_include): Use cpp_main_loc.
	(begin_header_unit, preprocess_module, preprocessed_module)
	(init_modules, finish_module_processing): Likewise.
	(fini_modules): Adjust.

2020-07-16  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (module_may_redeclare): Deal with declaring a builtin
	in a header unit.
	* rtti.c (init_rtti_processing): The type is not exported.

	libcpp/
	* directives.c (do_include_common): Drop FIXME question.
	* lex.c (cpp_maybe_module_directive): C++ keywords are not a thing
	here.
	(cpp_directive_only_process): Add assert.

	libcpp/
	* include/cpplib.h (struct cpp_callbacks): Adjust
	translate_include's return type.
	* files.c (_cpp_stack_file): Push the buffer returned by the hook.
	* lex.c (_cpp_clean_line): Fix buffer overrun.
	gcc/
	* langhooks.h (struct lang_hooks): Change
	preprocess_translate_include's return type.
	gcc/cp/
	* cp-tree.h (module_translate_include): Change return type.
	* module.cc (module_translate_include): Return a buffer, don't
	push it.

	libcpp/
	* include/cpplib.h (enum cpp_main_search): New.
	(struct cpp_options): Adjust.
	* init.c (cpp_read_main_file): Adjust.
	* macro.c (cpp_get_token_1): Remove FIXME.
	gcc/cp/
	* module.cc (handle_module_option): Adjust.

	gcc/cp/
	* pt.c (tsubst_expr): Do not process using decls again.
	gcc/testsuite/
	* g++.dg/modules/using-6_a.C: Enable elided code.
	* g++.dg/modules/using-8_[ab].C: New.

2020-07-15  Nathan Sidwell  <nathan@acm.org>

	Merge trunk 765fbbf9bb3.

2020-07-14  Nathan Sidwell  <nathan@acm.org>

	Merge trunk 5f809982e8e.

2020-07-13  Nathan Sidwell  <nathan@acm.org>

	Delete now-unused new pieces.
	gcc/
	* toplev.h (original_argc, original_argv): Delete.
	* toplev.c (original_argc, original_argv): Delete.
	gcc/cp/
	* cp-tree.h (DECL_CHECK): Delete.
	gcc/c-family
	* c-pragma.h (C_LEX_STRING_IS_HEADER): Delete.

	gcc/cp/
	* module.cc (module_state::set_filename): New.
	(module_state::do_import): Drop fname arg.
	(module_state::read_imports): Set filename here.
	(module_state::write_locations): Drop duplicate FIXME.
	(module_state::read_macros): Drop out of date FIXME.
	(direct_import): Adjust.
	(module_translate): Set filename if we're told it.
	(preprocess_module): Copy if filename already known.
	(preprocessed_module, init_modules): Adjust.

	gcc/cp/
	* module.cc (module_state::read_cluster): Add FIXME about
	unnecessary deduping.
	* name-lookup.c (name_lookup::process_module_binding): Remove
	FIXME.
	(name_lookup::adl_namespace_fns): Likewise.
	(name_lookup::search_adl): Likewise.
	(do_push_nested_namespace): Likewise.

	gcc/testsuite/
	* lib/scanlang.exp (scan-lang-dump-not): Fix 3-arg case.
	* g++.dg/modules/builtin-3_a.C: Remove unnecessary bracing.

	Merge trunk a1faa8e2470.

	Fix polymorphic type info emission and key-function confusion
	gcc/cp/
	* module.cc (trees_out::core_bools): Calculate externalness from
	POV of importer.
	(trees_{in,out{::lang_decl_bools): Do not stream
	not_really_extern.
	(trees_in::read_{var,function}_def): Recalculate
	not_really_extern.
	(trees_in::read_class_def): The key_method might become non-key.
	gcc/testsuite/
	* g++.dg/modules/sym-subst-3_a.C: Adjust regexp.
	* g++.dg/modules/virt-1_[ab].C: Adjust.
	* g++.dg/modules/virt-2_[abc].C: New.

2020-07-09  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (trees_out::type_node [VECTOR_TYPE]): poly_int's
	to_constant already does the checking we need.

	gcc/testsuite/
	* g++.dg/modules/sym-subst-3_a.C: Adjust scan for other ABIs

	gcc/testuite/
	* g++.dg/modules/builtin-3_[ab].C: Add va_list scans for
	aarch64 and powerpc ABIs.

2020-07-08  Nathan Sidwell  <nathan@acm.org>

	gcc/testsuite/
	* g++.dg/modules/module.exp: Remove tcl 8.6ism

	Merge trunk 6bf2ff0d52a.

2020-07-03  Nathan Sidwell  <nathan@acm.org>

	Merge trunk ce0f842492c

2020-07-03  Iain Sandoe  <iain@sandoe.co.uk>

	gcc/cp/
	* name-lookup.c (name_lookup::adl_namespace_fns): Last param is
	unused, and bootstrap complains :( [Nathan left it like that so
	he'd be reminded to remove it if it really turned out not needed]

2020-07-02  Nathan Sidwell  <nathan@acm.org>

	p1779 ABI isolation
	gcc/cp/
	* cp-tree.h (named_module_purview_p): New.
	* decl.c (grokmethod): Don't always implicitly inline.
	* module.cc (module_state_config::get_dialect): Add
	module_implicit_inline.
	gcc/
	* doc/invoke.texi (fmodule-implicit-inline): Document.
	gcc/c-family/
	* c.opt (-fmodule-implicit-inline): New.
	gcc/testsuite/
	* g++.dg/modules/imp-member-[12]_b.C: Add some inlines.
	* g++.dg/modules/vmort-1_a.C: Likewise.
	* g++.dg/modules/imp-inline-1_[ab].C: New.

2020-07-01  Nathan Sidwell  <nathan@acm.org>

	GMF entities are not findable by name
	gcc/cp/
	* modules.cc (enum depset::disc_bits): Remove DB_GLOBAL_BIT.
	(depset::is_global): Delete
	(depset::hash::make_dependency): Drop reachable GMF binding
	insertion.
	gcc/testsuite/
	* g++.dg/modules/builtin-[13]_[ab].C: Adjust scans.
	* g++.dg/modules/mod-sym-2.C: Adjust scans.

	Implement FR039 -- dependent ADL and friend fns
	gcc/cp/
	* name-lookup.c (name_lookup::adl_namespace): Instantiation path
	is not important here.
	(name_lookup::search_adl): Reimplement dependent adl for modules.
	gcc/testsuite/
	* g++.dg/modules/adl-[12]_b.C: export.
	* g++.dg/modules/adl-[45]_[abcd].C: New.

2020-06-30  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* class.c (copyfndecl_with_name): Drop inadvertent
	DECL_CLONED_FUNCTION setting.  Pass 0 for top_level to
	rest_of_decl_compiulation.

	gcc/cp/
	* class.c (copy_fndecl_with_name): Add tree code parm.  Adjust
	callers.

	libcc1/
	* libcp1plugin.cc (plugin_build_decl): Adjust.

	Unify copy_fndecl_with_name and clone_decls.
	gcc/cp/
	* class.c (DECL_NEEDS_VTT_PARM_P): Delete.
	(copy_fndecl_with_name): Add ctor booleans, use them.  Make static.
	(copy_operator_fn): New wrapper.
	(build_clone): Adjust to use copy_fndecl_with_name.
	(build_clones): Rename to ...
	(build_cdtor_clones): ... here.
	(clone_function_decl): Rename to ...
	(clone_cdtor): ... here.
	(clone_constructors_and_destructors): Adjust.
	* cp-tree.h (build_clones): Rename to build_cdtor_clones.
	(clone_function_decl): Rename to clone_cdtor.
	(copy_fndecl_with_name): Rename to copy_operator_fn.  Change arg
	type.
	* method.c (implicitly_declare_fn): Adjust.
	(lazily_declare_fn): Likewise.
	* module.c (trees_in::decl_value): Adjust.
	* pt.c (tsubst_function_Decl, instantiate_template_1): Adjust.

2020-06-29  Nathan Sidwell  <nathan@acm.org>

	Merge master 9a33c41fe42

	Merge master 44492e248cb
	c++: implicit operator== adjustments from P2002. [Jason Merrill]
	gcc/cp/
	* class.c (build_clone): Retain old version for the moment.
	(DECL_NEETS_VTT_PARM_P): Resurrect, before we kill it again.

2020-06-25  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* mapper-server.cc (process_server): We should Write when writing.
	(server): Fix off-by-one error.

	Merge master 68df8e8c343

	Merge master 502d63b6d61
	Lower VEC_COND_EXPR into internal functions. [Martin Liska]
	Apply d11c9841d54 Add missing check for gassign.  [Martin Liska]
	Apply 9435fb9668e Fix typo in tree-ssa-reassoc.c. [Martin Liska]

	Merge master 2021af0c23a

	Merge master 668ef28fbb4
	c++: Clean up previous change [PR41437] [Patrick Palka]
	gcc/cp/
	* module.cc (trees_{in,out}::code_vals [TEMPLATE_INFO]): Adjust
	access checking streaming.

	Merge master 92bed036098
	c++: Improve access checking inside templates [PR41437] [Patrick Palka]

	Merge master a97e49a89d1

2020-06-24  Nathan Sidwell  <nathan@acm.org>

	Merge master f2242ec0d3f
	Over the hump!

	Constrained partial specializations
	gcc/cp/
	* module.cc (depset::hash::add_partial_redirect): Add slot parm.
	(enum merge_kind): Add MK_partial.
	(merge_kind_name): Likewise.
	(trees_out::decl_node): A redirect may be for an EK_DECL.
	(trees_out::get_merge_kind): Determine MK_partial.
	(trees_{in,out}::key_mergeable): Deal with MK_partial.
	(depset::hash::make_dependency): Deal with discovering a partial
	specialization.
	* pt.c (maybe_new_partial_specialization): Add module bits to the
	new typedef.
	(tsubst_template_decl): Relax module import assert.
	(tsubst_template_decl): Refactor, add fixme to check.
	gcc/testsuite/
	* g++.dg/modules/nested-constr-1.h: New.
	* g++.dg/modules/nested-constr-1_a.H: New.
	* g++.dg/modules/nested-constr-1_b.C: New.
	* g++.dg/modules/nested-constr-2_a.C: New.
	* g++.dg/modules/nested-constr-2_b.C: New.
	* g++.dg/modules/nested-constr-2_c.C: New.
	* g++.dg/modules/tmpl-part-req-1.h: New.
	* g++.dg/modules/tmpl-part-req-1_a.H: New.
	* g++.dg/modules/tmpl-part-req-1_b.C: New.
	* g++.dg/modules/tmpl-part-req-2.h: New.
	* g++.dg/modules/tmpl-part-req-2_a.H: New.
	* g++.dg/modules/tmpl-part-req-2_b.C: New.

2020-06-11  Nathan Sidwell  <nathan@acm.org>

	Merge master b825a228907

2020-06-10  Nathan Sidwell  <nathan@acm.org>

	Merge master ac9face8d26
	PR c++/95263
	gcc/cp/
	* pt.c (lookup_template_class_1): Do not apply reversion
	gcc/testsuite/
	* g++.dg/template/pr95263.C: New (XFAIL)

	Merge master 6c8e16aea85

2020-06-10  Iain Sandoe  <iain@sandoe.co.uk>

	Fixes for darwin
	gcc/cp/
	* mapper-server.cc: Reorder includes.
	(server): Block scope potentially empty if clause.
	* module.cc (get_mapper): Don't use C++14.
	gcc/testsuite/
	* g++.dg/modules/bad-mapper-3: Adjust error.

2020-06-05  Nathan Sidwell  <nathan@acm.org>

	Install V1 module protocol goop
	gcc/cp/
	* Make-lang.in: Remove mapper-server2 hack.
	* mapper-client.cc: Add additional mechanisms to get a server.
	* mapper-client.h: Delete.
	* mapper-resolver.cc: Fix file reading bugs
	* mapper-server.cc: Original deleted.
	* mapper-server2.cc: Renamed to mapper-server.cc.
	* mapper.h: Adjust.
	* module.cc: Adjust.
	gcc/testsuite/
	* g++.dg/modules/bad-mapper-1.C: Adjust expected errors.
	* g++.dg/modules/bad-mapper-2.C: Likewise.
	* g++.dg/modules/bad-mapper-3.C: Likewise.
	* g++.dg/modules/map-2.C: Likewise.

	Add libcody as an external library
	* libcody: Delete
	* Makefile.def: Revert.
	* configure.ac: Revert. Add --with-libcody.
	* Makefile.tpl: Add CODYLIB, CODYLIBINC, HOST_CODYLIB, HOST_CODYLIBINC.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.
	gcc/
	* Makefile.in: Revert.  Add CODYLIB, CODYLIBINC.
	* configure.ac: Add CODYLIB, CODYLIBINC.
	* configure: Rebuilt.
	gcc/cp
	* Make-lang.in: Revert.

2020-06-02  Nathan Sidwell  <nathan@acm.org>

	Add libcody with stub users
	* libcody: New.  Currently a symlink to cody repo.
	* Makefile.def: Add libcody.
	* configure.ac: Add libcody.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.
	gcc/
	* Makefile.in: Add libcody.
	gcc/cp/
	* Make-lang.in: Add libcody
	* mapper.h: New stub/
	* mapper-resolver.cc: New stub.
	* mapper-server2.cc: New stub.

2020-05-21  Nathan Sidwell  <nathan@acm.org>

	FR39 ...

	Merge master 149c8c7c27a

	Premerging Patrick's c++/95223 fix.
	gcc/cp/
	* cp-tree.h (comparing_typenames): Declare.
	(module_streaming): Delete.
	* modules.cc (module_streaming): Delete.
	(module_state::read_cluster): Increment comparing_typenames, not
	module_streaming.
	* pt.c (comparing_typenames): Define.
	(spec_hasher::equal): Increment it.
	* typeck.c (structural_comptypes): Check it here for typedefs.

	libcpp/
	* files.c, init.c, internal.h: Adjust file_find_kind names from trunk.

	libcpp/
	* line-map.c (linemap_add): Set range and column bits to zero.
	gcc/c-family/
	* c-opts.c (c_common_post_options): Add comment.
	(c_finish_options): Call linemap_line_start to start line.

2020-05-20  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* include/cpplib.h (cpp_read_main): Document preamble arg.
	* internal.h (IT_MAIN_{ZERO,REAL}): Rename to ...
	(IT_MAIN_PREAMBLE, IT_MAIN): ... these.
	* files.c (_cpp_stack_file): Adjust.
	* init.c (cpp_read_main_file): Adjust.

	libcpp/
	* directives.c (_cpp_do_file_change): Optimize rewinding one line
	to line zero.
	gcc/c-family/
	* c-opts.c (c_finish_options): Set locations to zero.
	* c-ppoutput.c (cb_define): Always advance line number.

	libcpp/
	* files.c (cpp_push_include): Pass highest_line for loc.
	(cpp_push_default): Likewise.
	* line-map.c (linemap_add): Set range and column bits to what we
	used to figure start location.

2020-05-19  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* internal.h (enum _find_file_kind): New.
	(_cpp_find_file): Use it, not 3 bools.
	* files.c (_cpp_find_file): Use _find_file_kind enum, not bools.
	(_cpp_stack_include, cpp_find_header_unit, _cpp_fake_include)
	(_cpp_do_file_change, _cpp_compare_file_date): Adjust.
	* init.c (cpp_read_main): Adjust _cpp_find_file call.

2020-05-18  Iain Sandoe  <iain@sandoe.co.uk>

	gcc/testsuite/
	* g++.dg/modules/sym-subst-3_a.C: Adjust scan asm for Darwin.
	* g++.dg/modules/init-2_b.C: Adjust scan-asms for Darwin.
	* g++.dg/modules/init-2_c.C: Likewise.

	gcc/cp/
	* mapper-client.cc: Move fallback typedef for sighandler_t
	from here ...
	* mapper-client.h: ... to here.

2020-05-19  Nathan Sidwell  <nathan@acm.org>

	Merge master ed63c387aa0

	gcc/cp/
	* name-lookup.c (add_imported_namespace): Clarify
	inline/non-inline error message.

	libcpp/
	* lex.c (do_peek_module): Permit non-ascii char sets.

2020-05-15  Nathan Sidwell  <nathan@acm.org>

	Enumerate load states.
	gcc/cp/
	* module.cc (enum module_loadedness): New.
	(module_state::load_state): Rename to ..
	(module_state::loadedness): ... this, change type.
	(module_state::read_{imports,preprocessor,language}): Adjust,
	(module_State::{load_section,do_mport}): Likewise,
	(direct_import, {import,declare,preprocess}_module): Likewise.

	Remove  {,purview_,partition_}direct_p flags.
	gcc/cp/
	* module.cc (module_state::{,purview_,partition_}_direct_p):
	Remove flags.
	(module_state::is{,purview_,partition_}direct_p}): Adjust.
	(module_state::{read,write}_imports): Remove direct flag handling.
	(module_state::write): Likewise.
	(direct_import, process_module): Likewise.

	Duplicate {,purview_,partition_}direct_p flags in an enum.
	gcc/cp/
	* module.cc (enum module_directness): New.
	(module_state): Add it.
	(module_state::is{,purview_,partition_}direct_p}): Consistency
	asserts.
	(module_state::{read,write}_imports): Adjust and add Consistency
	asserts.
	(module_state::write): Likewise.
	(direct_import, preprocess_module): Likewise.

2020-05-14  Nathan Sidwell  <nathan@acm.org>

	Stop GMF leakage from interface to implementation
	gcc/cp/
	* cp-tree.h (preprocess_module): Add in_purview param.
	* lex.c (token_coro::resume): Adjust.
	* module.cc (module_state::purview_direct_p): New flag.
	(module_state::{read,write}_imports): Pay attention to it for
	invisible imports.
	(begin_header_unit): Adjust preprocess_module call.
	(preprocess_module): Set purview_direct_p as appropriate.
	gcc/testsuite/
	* g++.dg/modules/gmf-2_[abcd].[CH]: New.

	Merge master f497e36ae56

2020-05-13  Nathan Sidwell  <nathan@acm.org>

	Implement P1874 Dynamic Initialization Order
	gcc/cp/
	* cp-tree.h (module_initializer_kind)
	(module_add_import_initializers): Declare.
	(mangle_module): Add include_partition parm.
	(init_module_processing): Rename to init_modules.
	(fini_modules): Declare.
	(mangle_identifier): Add prefix char.
	(mangle_module_global_init): Declare.
	* decl.c (cxx_init_decl_processing): Adjust for module init
	rename.
	* decl2.c (start_objects): Maybe mangle module initializer name.
	Add module initializers.
	(generate_ctor_or_dtor_function): Add module init support.
	(c_parse_final_cleanups): Likewise, adjust for module fini
	addition.
	* mangle.c (mangle_identifier): Add prefix char.
	(write_module): New, broken out of ...
	(maybe_write_module): ... here.  Call it.
	(mangle_module_global_init): New.
	* module.cc (module_state): Add call_init_p flag.
	(num_init_calls_needed): New global.
	(module_state::mangle): Add include_partition parm.
	(mangle_module): Likewise.
	(module_initializer_kind): New.
	(module_add_import_initializers): New.
	(init_module_processing): Rename to ...
	(init_modules): ... here.
	(finish_module_processing): Calculate call_init_p.
	(fini_modules): New, broken out of finish_module_processing.
	gcc/testsuite/
	* g++.dg/modules/init-[12]_[abc].C: New.

2020-05-12  Nathan Sidwell  <nathan@acm.org>

	Merge master 2a0225e4786.

2020-05-08  Nathan Sidwell  <nathan@acm.org>

	Merge master b224c3763e0.

	EOF has a location
	gcc/cp/
	* parser.c (cp_lexer_set_source_position_from_token): Don't
	special-case EOF.
	gcc/testsuite/
	* c-c++-common/raw-string-6.c: Adjust expected locations:
	* g++.dg/cpp0x/decltype63.C: Likewise.
	* g++.dg/cpp0x/gen-attrs-64.C
	* g++.dg/cpp0x/pr68726.C: Likewise.
	* g++.dg/cpp0x/pr78341.C: Likewise.
	* g++.dg/cpp1y/pr65202.C: Likewise.
	* g++.dg/cpp1z/class-deduction44.C: Likewise.
	* g++.dg/diagnostic/unclosed-extern-c.C: Likewise.
	* g++.dg/diagnostic/unclosed-function.C: Likewise.
	* g++.dg/diagnostic/unclosed-namespace.C: Likewise.
	* g++.dg/diagnostic/unclosed-struct.C: Likewise.
	* g++.dg/ext/pr84598.C: Likewise.
	* g++.dg/other/switch4.C: Likewise.
	* g++.dg/parse/crash10.C: Likewise.
	* g++.dg/parse/crash18.C: Likewise.
	* g++.dg/parse/crash35.C: Likewise.
	* g++.dg/parse/crash59.C: Likewise.
	* g++.dg/parse/crash61.C: Likewise.
	* g++.dg/parse/crash67.C: Likewise.
	* g++.dg/parse/ctor3.C: Likewise.
	* g++.dg/parse/error14.C: Likewise.
	* g++.dg/parse/error5.C: Likewise.
	* g++.dg/parse/error56.C: Likewise.
	* g++.dg/parse/invalid1.C: Likewise.
	* g++.dg/parse/parameter-declaration-1.C: Likewise.
	* g++.dg/parse/parser-pr28152-2.C: Likewise.
	* g++.dg/parse/parser-pr28152.C: Likewise.
	* g++.dg/parse/pr68722.C: Likewise.
	* g++.dg/pr46852.C: Likewise.
	* g++.dg/pr46868.C: Likewise.
	* g++.dg/template/crash115.C: Likewise.
	* g++.dg/template/crash43.C: Likewise.
	* g++.dg/template/error-recovery1.C: Likewise.
	* g++.dg/template/error57.C: Likewise.
	* g++.old-deja/g++.other/crash31.C: Likewise.

2020-05-07  Nathan Sidwell  <nathan@acm.org>

	Merge master ab2952c77d0

2020-05-05  Nathan Sidwell  <nathan@acm.org>

	Just push the eh decls.
	gcc/cp/
	* except.c (declare_library_fn_1): Don't look at current binding.
	Just make the decl and push it.
	* name-lookup.h (get_global_module_decls): Delete decl.
	* name-lookup.c (get_global_module_decls): Delete defn.

	Fix eh specs
	gcc/testsuite/
	* g++.dg/eh/builtin{5,7,9,10,11}.C: Fix eh specs on __cxa fn decls.

	Fix libitm's decls
	libitm/
	* eh_cpp.cc (__cxa_allocate_exception, __cxa_free_exception)
	(__cxa_begin_catch, __cxa_tm_cleanup, __cxa_eh_globals): Fix
	exception specification.
	(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)
	(_ITM_cxa_begin_catch): Likewise.
	* libitm.h (_ITM_NOTHROW): New define.
	(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)
	(_ITM_cxa_begin_catch): Use it.
	* testsuite/lib/libitm.exp (libitm_init): Add
	-fdiagnostics-color=never.

2020-05-04  Nathan Sidwell  <nathan@acm.org>

	Simplify except fn helper pushing part 1
	gcc/cp/
	* decl.c (push_library_fn): Return the decl pushdecl_toplevel returns.
	* except.c (verify_library_fn): Replace with ...
	(declare_library_fn_1): ... this fn.
	(declare_library_fn): Call it.
	(build_throw): Call declare_library_fn_1.
	* name-lookup.h (get_global_module_decls): Declare.
	* name-lookup.c (get_namespace_binding): Return this TU's
	bindings.
	(get_global_module_decls): New.
	gcc/testsuite/
	* g++.dg/eh/builtin10.C: Adjust expected errors.
	* g++.dg/eh/builtin11.C: Likewise.
	* g++.dg/eh/builtin6.C: Likewise.
	* g++.dg/eh/builtin7.C: Likewise.
	* g++.dg/eh/builtin9.C: Likewise.
	* g++.dg/parse/crash55.C: Likewise.

2020-05-01  Nathan Sidwell  <nathan@acm.org>

	Fix macro expansion of header-unit names
	libcpp/
	* macro.c (cpp_get_token_1): Pay attention to arg parsing mode,
	and the existence of padding/comment tokens.
	gcc/testsuite/
	* g++.dg/modules/cpp-6_[abc].[CH]: New.

2020-04-30  Nathan Sidwell  <nathan@acm.org>

	Set TREE_USED on stream in.
	gcc/cp/
	* module.cc (trees_in::unused): New field.
	(trees_in::tree_node): Add defaulted off is_use arg, set TREE_USED
	on streamed in obect.  Adjust callers to set it.
	(trees_{in,out}::core_bools): Do not stream base.used_flag.
	(trees_{in,out}::core_vals): Reorder BINFO fields.  Increment
	unused around vtbl pieces.
	(trees_in::decl_value): Save and reset unused field.
	(trees_in::read_var_def): Increment unsused for vtbl initializers.
	gcc/testsuite/
	* g++.dg/modules/used-1_[abc].C: New.

	Tweak builtin fn hack
	gcc/cp/
	* name-lookup.c (get_namespace_binding): Strip singleton
	overloads.
	gcc/testsuite/
	* g++.dg/modules/libfn-1_[ab].C: New.

2020-04-28  Nathan Sidwell  <nathan@acm.org>

	Partition pending indirection fixes
	gcc/cp/
	* module.cc (trees_in::install_entity): Treat pending flags
	independently, adjust indirection installation.
	(pendset_lazy_load): Add specialization_p arg.  Use for
	indirection adjustment.
	(get_primary_module): Look at implementation unit's parent.
	(lazy_load_{specializations,members}): Adjust.
	gcc/testsuite/
	* g++.dg/modules/part-6_[abcde].C: New.

2020-04-23  Nathan Sidwell  <nathan@acm.org>

	Stream definitions after decls.
	gcc/cp
	* module.cc (module_state::write_cluster): Break out definition
	streaming to separate loop.
	gcc/testsuite/
	* g++.dg/modules/member-def-[12]_c.C: Adjust scans, oh for CHECK-DAG.

	Stream node types last
	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Move type streaming to
	end.
	gcc/testsuite/
	* g++.dg/modules/indirect-4_c.C: Adjust scan.

2020-04-22  Nathan Sidwell  <nathan@acm.org>

	Stream imports at start of cluster
	gcc/cp/
	* module.cc (trees_out::importedness): New checker.
	(depset::hash::add_dependency): Add imports.
	(depset::tarjan::connect): Skip imports.
	(module_state::{read,write}_cluster): Seed imports before the
	cluster itself.
	gcc/testsuite/
	* g++.dg/modules/class-3_[bd].C: Adjust scans.
	* g++.dg/modules/imp-member-[12]_[ce].C: Adjust scans.
	* g++.dg/modules/member-def-2_c.C: Adjust scans.
	* g++.dg/modules/vmort-2_c.C: Adjust scans.


2020-04-21  Nathan Sidwell  <nathan@acm.org>

	Don't stream DECL_ODR_USED or TREE_ASM_WRITTEN
	gcc/cp/
	* module.cc (trees_{in,out}::core_values): Don't stream
	base.asm_written_flag.
	(trees_{in,out}::lang_decl_bools): Don't stream u.base.odr_used.

	Remove DECL_MODULE_PARTITION_P, it is not needed.
	gcc/cp/
	* cp-tree.h (DECL_MODULE_PARTITION_P): Delete.
	(lang_decl_base): Remove module_partition_p bitfield.
	* decl.c (duplicate_decls): No need to check or reset it.
	* lex.c (cxx_dup_lang_specific): No need to reset it.
	* pt.c (build_template_decl): No need to check it.
	(tsubst_template_decl): Likewise, or reset it.
	* module.cc (trees_in::decl_value): No need to set it.
	(trees_out::decl_node): No need to check it.
	(depset::hash::make_dependency): Likewise, Adjust import marking
	code.
	(set_instantiating_module): No need to reset it.

2020-04-17  Nathan Sidwell  <nathan@acm.org>

	Merge master a28edad3da5c59f09565d3d42e20be1a924986c4

	gcc/cp/
	* cxx-mapper.cc: Rename to ...
	* mapper-server.cc: ... here.
	* Make-lang.in: Adjust.
	* module.cc (make_mapper): Adjust.
	gcc/testsuite/
	* g++.dg/modulex/inc-xlate-1_e.C: Adjust.
	* g++.dg/modulex/legacy-[26]_[bcdef].[CH]: Likewise.

	gcc/cp/
	* module.cc (mapper_{import_export,export_done}): Revert
	2020-04-13 change.

	gcc/cp/
	* mapper-client.{h,cc}: New, broken out of ...
	* module.cc: ... here.
	(maybe_remove_cmi_prefix): Delete.
	* Make-lang.in: Add mapper-client.

	gcc/cp/
	* module.cc (module_mapper::{get,make}): Replace with ...
	(get_mapper, make_mapper): ... these.
	(module_mapper:(kill,fini): Delete.
	(module_mapper::{import_export,export_done}): Replace with ...
	(mapper_import_export, mapper_export_done): ... these.

	gcc/cp/
	* module.cc (module_mapper::to): Drop unneeded field.

	gcc/cp/
	* module.cc (module_mapper::{open,close}): New methods, use them.

	gcc/cp/
	* module.cc (module_mapper): Break more stuff out of ctor.

2020-04-13  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (module_mapper): Remove knowledge of module_state,
	update all callers.

2020-04-08  Nathan Sidwell  <nathan@acm.org>

	gcc/testsuite/
	* g++.dg/modules/hello-1_[ab].C: New.

	gcc/cp/
	* module.cc (trees_in::decl_value): Need to retrofit lang for
	inner.
	gcc/testsuite/
	* g++.dg/modules/gmf-1_[ab].C: New.

	gcc/testsuite/
	* g++.dg/modules/xtreme-header-[1-6]_c.C: New.

	gcc/cp/
	* module.cc (trees_in::key_mergeable): Avoid null deref.
	(direct_import): Create attachment table.
	gcc/testsuite/
	* g++.dg/modules/lambda-[23]_c.C: New.

	Merge master 50c7853216e8511971c55b51d7fe29173db4749b

2020-04-07  Nathan Sidwell  <nathan@acm.org>

	C++20 Ranges!
	gcc/testsuite/
	* g++.dg/modules/xtreme-header-2.h: Enable in c++20 mode.

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parm_value): Stream auto
	placeholder & constraints.
	gcc/testsuite/
	* g++.dg/modules/lambda-4{,_[ab]}.[hHC]: New.

	_FUN with recursive types (pun intended)
	gcc/cp/
	* module.cc (trees_out::key_mergeable): A lambda's static _FUN has
	a recursive return type.
	(trees_in::is_matching_decl): Likewise.
	gcc/testsuite/
	* g++.dg/modules/lambda-4{,_[ab]}.[hHC]: New.
	* g++.dg/modules/concept-6_b.C: Remove xfail.

	gcc/
	* print-tree.c (print_node): Explicitly show CALL_EXPR null arguments.

	gcc/cp/
	* module.cc (trees_out::key_mergeable): Instantiations can have
	requires.  Not just the template.
	gcc/testsuite/
	* g++.dg/modules/concept-6{,_[ab]}.[hHC]: New.

	gcc/cp/
	* tree.c (cp_tree_equal): [CALL_EXPR] Directly check number of
	arguments to a call.  Assert they exist.
	* typeck.c (structural_comptypes): [DECLTYPE_TYPE] Break apart if
	conditional.

2020-04-06  Nathan Sidwell  <nathan@acm.org>

	gcc/cp
	* module.cc (depset::hash::make_dependency): Imported namespaces
	from a partition don't have PARTITION_P set.
	(module_state::write): Likewise.
	gcc/testsuite/
	* g++.dg/modules/part-5_[abc].C: New.

2020-04-03  Nathan Sidwell  <nathan@acm.org>

	PR c++/94476
	gcc/cp/
	* class.c (layout_class_type): Zap NSDMI of as_base fields.
	gcc/testsuite/
	* g++.dg/modules/nsdmi-2.C: New.

	Merge master bcafd8748cf9eb83a9e71bf67c4e2a7c5c8f513c

	NSDMIs
	WARNING causes ICES in the STL header tests.  There's a trunk
	NSDMI parsing bug (pr94476)
	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Write FIELD_DECL initial
	value.
	gcc/testsuite/
	* g++.dg/modules/nsdmi-1_[ab].C: New.

	gcc/testsuite/
	* g++.dg/modules/xtreme-header-[123456]{,_[ab]}.[hHC]: New.

	gcc/
	* gcc.c (driver::maybe_print_and_exit): Shout about
	experimentalness.
	(driver::final_actions): Likewise.
	* diagnostic.c (diagnostic_action_after_output): Likewise.
	gcc/testsuite/
	* lib/prune.exp (prune_gcc_output): Prune the shouting.

	Template vars inited to lambdas
	gcc/cp/
	* module.cc (depset::hash::find_dependencies): Adjust dump
	predicate.
	gcc/testsuite/
	* g++.dg/modules/lambda-3{,_[ab]}.[hHC]: New.

	Resurrect topological key-order sort for clusters
	gcc/cp/
	* module.cc (depset::hash): Add chain, is_key_order.
	(trees_out::is_key_order): New.
	(trees_out::decl_value): Adjust for key-order walk.
	(trees_out::{get_merge_kind,key_mergeable}): Likewise.
	(depset::hash::add_dependency): Deal with key-order dependency.
	(depset::hash::add_mergeable): New.
	(depset::hash::find_dependencies): Adjust for key-order walk.
	(cluster_cmp): Delete.
	(sort_cluster): New.
	(module_state::write): Call sort_cluster, not qsort (cluster_cmp).
	gcc/testsuite/
	* g++.dg/modules/indirect-[234]_b.C: Adjust final scan.
	* g++.dg/modules/late-ret-3_a.H: Likewise.
	* g++.dg/modules/member-def-[12]_c.C: Likewise.
	* g++.dg/modules/tpl-alias-1_a.H: Likewise.
	* g++.dg/modules/tpl-friend-1_a.C: Likewise.
	* g++.dg/modules/tpl-spec-3_[ab].C: Likewise.
	* g++.dg/modules/using-7.C: Likewise.

2020-04-02  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (trees_out::decl_node): Treat namespaces like other
	decls.
	(module_state::write): When checking, insert non-imported
	namespace-decls into the entity map here.

	gcc/cp/
	* modules.cc (trees_out::decl_value): Public.
	(trees_out::decl_node): Do not expect by-value namespaces.
	(depset::hash::find_dependencies): Deal with namespaces here.

2020-04-01  Nathan Sidwell  <nathan@acm.org>

	gcc/testsuite/
	* g++.dg/modules/tpl-alias-1_[ab].[HC]: Fix unresolved tests.
	* g++.dg/modules/vtt-2_b.C: Likewise.

	Lambdas attached to namespace-scope non-template vars
	gcc/cp/
	* cp-tree.h (DECL_ATTACHED_DECLS_P): New.
	(struct lang_decl_base): Add attached_decls_p.
	(maybe_attach_decl): Declare.
	* lambda.c (record_lambda_scope): Call maybe_attach_decl.
	* lex.c (cxx_dup_lang_specific): Clear DECL_ATTACHED_DECLS_P.
	* module.c (uintset<T>::hash::create): New member function.
	(attachset, attached_tables): Declare.
	(enum merge_kind): Add MK_attached.  Adjust.
	(trees_{in,out}::lang_decl_bools): Stream attached_decls_p.
	(trees_{in,out}::decl_value): Stream attached decls.
	(trees_out::get_merge_kind): Determine if MK_attached.
	(trees_{in,out}::key_mergeable): Stream MK_attached.
	(depset::hash::make_dependency): You can get anonymous templatey
	things (lambdas).
	(maybe_attach_decl): New.
	(finish_module_processing): Delete attached_table.
	gcc/testsuite/
	* g++.dg/modules/lambda-2_[ab].[HC]: Remove xfail, add dump scans.

2020-03-31  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (module_streaming): Declare.
	* module.cc (module_streaming): Define.
	(cluster_cmp): Do not strip template off an alias instantiation.
	(module_state::read_cluster): Increment module_streaming around
	the loading.
	* typeck.c (structural_comptypes): Do not resolve typename types
	when module_streaming.

	gcc/cp/
	* pt.c (tsubst_lambda_expr): Set extra scope after creating the
	lambda struct.

2020-03-30  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (template<T> uintset): New template created from ...
	(pendset): ... this.  Use it.  Adjust all uses.

2020-03-27  Nathan Sidwell  <nathan@acm.org>

	Merge master 62ede14d30f5d083f1ab23bcab6e0e3c9c649006

2020-03-26  Nathan Sidwell  <nathan@acm.org>

	STL headers header-unity (except C++ 20 ranges)
	gcc/testsuite/
	* g++.dg/modules/xtreme-header-{,_[ab]}.[hHC]: New.

	Alias templates working (properly)
	gcc/cp/
	* modules.cc (enum depset::disc_bits): Add DB_ALIAS_TMPL_INST_BIT,
	Replace DB_BOTH_SPEC_BIT with DB_ALIAS_SPEC_BIT.
	(enum merge_kind): Replace MK_tmpl_both_mask with
	MK_tmpl_alias_mask.  Add MK_alias_spec.
	(merge_kind_name): Adjust.
	(trees_out::core_vals): DECL_TEMPLATE_RESULT might not be visited.
	(trees_{in,out}::decl_value): Cope with alias template
	instantiations.
	(trees_out::get_merge_kind): Add alias support.
	(trees_{in,out}::ket_mergeable): Add alias support.
	(check_mergeable_decl): Likewise.
	(trees_in::is_matching_decl): Drop inner parm, adjust.
	(depset::hash::make_dependency): Add alias suport.
	(depset::hash::add_specializations): Detect and mark aliases.
	gcc/testsuite/
	* g++.dg/modules/tpl-alias-1{,_[ab]}.[hHC]: New.

	gcc/cp/
	* module.cc (trees_{in,out}::decl_value): Instantiations are
	merged things too.

	gcc/cp/
	* module.cc (trees_{in,out}::install_entity): New, broken out of ...
	(trees_{in,out}::decl_value): ... here.  Call them.

2020-03-25  Nathan Sidwell  <nathan@acm.org>

	WARNING: This breaks lots of modules tests because an inconsistent
	invariant wrt alias templates is now consistently different.  This
	is intended.  gcc/cp/
	* cp-tree.h (SET_TYPE_TEMPLATE_INFO): Not for aliases.
	* pt.c (lookup_template_class_1): Type alias's template info
	should already be correct.
	(tsubst_template_decl): Don't reset TI_TEMPLATE of an alias.

2020-03-24  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (SET_TYPE_TEMPLATE_INFO): Only expand VAL once.
	* pt.c (perform_typedefs_access_check)
	(append_type_to_template_for_access_check): Move G_T_N_A_C call
	out of loop.
	(get_types_needing_access_check): Simplify.

2020-03-23  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parms_fini): Determine
	contextness requirement from TPI.

	Merge master a3586eeb88414e77c7cccb69362b8d04562536b6.

2020-03-20  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parms_fini): Flag whether
	tpl-tpl-parm context is non-null.

2020-03-19  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_in::decl_value): No need to install constraints
	for duplicate.
	(trees_in::is_matching_decl): Open code comparison, don't use
	decls_match.

	gcc/cp/
	* module.cc (trees_{in,out}::{read,write}_function_def): Potential
	cexprs have result == error_mark_node.

	gcc/cp/
	* module.cc (trees_in::decl_value): Template instantiations are
	never implicit member fns.
	(module_state_config::get_dialect): Check exceptions, rtti,
	inheriting ctors.
	gcc/testsuite/
	* g++.dg/modules/inh-tmpl-ctor-1{,_[ab]}.[hHC]: New.

	Merge master 3512dc0108afbed3bece2e9fa1719fb3ce1d73d9

2020-03-18  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::type_node): Do ptr-mem-fns after typedef
	detection.
	gcc/testsuite/
	* g++.dg/modules/pmf-2{,_[ab]}.[hHC]: New.

	gcc/cp/
	* module.cc (trees_out::key_mergeable): Do not perform
	requirements stubstutition.
	(check_mergeable_decl): Likewise.

	gcc/cp/
	* decl.c (decls_match): Use fndecl_declared_return_type for
	newdecl too.
	* module.cc (trees_out::key_mergeable): Use
	fndecl_declared_return_type.
	(check_mergeable_decl): Likewise.
	gcc/testsuite/
	* g++.dg/modules/auto-1{,_[ab]}.[hHC]: New.

2020-03-17  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_in::is_matching_decl): Propagate instantiated
	noexcept specifications.
	gcc/testsuite/
	* g++.dg/modules/except-3{,_[ab]}.[hHC]: New.

	gcc/cp/
	* module.cc (lazy_snum, recursive_lazy): New.
	(module_state::read_language): Set lazy_snum.
	(lazy_load_{binding,specializations}): Call recursive_lazy.

2020-03-16  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (elf_in::defrost): Return bool.
	(module_state::from): May return NULL.
	(module_state::maybe_completed_reading): New, broken out of
	check_read.
	(pendset::lazy_load): Likewise.
	(module_state::write): Do not read partitions here.
	(module_state::read_initial): Do not create slurp or elf_in here.
	(module_state::load_{preprocessor,language}): Return bool, add
	outermost flag.  Adjust check_read calls.
	(module_state::load_section): Reimplement, check mc_slot, issue
	errors here.
	(module_state::check_read): Reimplement for use by config loaders.
	(module_state::do_import): Add outermost flag, alloc slurping
	here.  Adjust check_read call.
	(module_state::lazy_load): Thin wrapper on load_section.
	(module_state::lazy_load_binding): Check error emission here and
	diagnose.
	(module_state::lazy_load_specializations): Likewise.
	(direct_import, preprocess_module): Adjust.
	gcc/testsuite/
	* g++.dg/modules/leg-merge-4_c.C: Adjust regexp matching

	gcc/cp/
	* doc/invoke.texi (C++ Modules): Clarify a couple of things.

2020-03-13  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.c (lookup_field_ident): Check TYPE_LANG_SPECIFIC
	before getting the member vector.
	gcc/testsuite/
	* g++.dg/modules/pmf-1{,_[ab]}.[hHC]: New.

	gcc/cp/
	* pt.c (template_args_equal): Slight refactor to clarify control
	flow.
	* tree.c (cp_tree_equal): Use comp_template_args for TREE_VEC.
	* typeck.c (structural_comptypes): Comment about exception specs.

	Ranges, you were right, have a biscuit!
	gcc/testsuite/
	* g++.dg/modules/odr-1{,_[ab]}.[hHC]: Moved to ..
	* g++.dg/modules/lambda-2{,_[ab]}.[hHC]: ... here.  Xfailed

	gcc/cp/
	* module.cc (trees_in::decl_value): Set and reset constraints on
	duplicate decl.
	(trees_in::is_matching_decl): Use decls_match to compare decls.
	gcc/testsuite/
	* g++.dg/modules/except-2{,_[ab]}.[hHC]: New.
	* g++.dg/modules/builtin-4_[ab].[HC]: New.

	gcc/cp/
	* mangle.c (find_substitution): Cleanup for c++/94027 fix.

	gcc/cp/
	* module.cc (module_state::read_config): Allow overriding the
	version check.
	gcc/c-family/
	* c.opt (fmodule-version-ignore): New undocumented option.

2020-03-11  Nathan Sidwell  <nathan@acm.org>

	Bad ranges, no biscuit!
	gcc/testsuite/
	* g++.dg/modules/odr-1{,_[ab]}.[hHC]: New.

2020-03-10  Nathan Sidwell  <nathan@acm.org>

	Reconstruct deferred exception spec types
	gcc/cp/
	* cp-tree.h (fixup_deferred_exception_variants): Declare.
	* tree.c (fixup_deferred_exception_variants): New.
	* parser.c (cp_parser_member_declaration): Comment about friends.
	(cp_parser_class_specifier_1): Call it, don't generate a new type.
	(cp_parser_noexcept_specification_opt): Reorder if conditional.
	gcc/testsuite/
	* g++.dg/modules/deferred-1{,_[ab]}.[hHC]: New.

	Merge master 3654d49d0ff651b2a78401bc2430428711e7d2eb

2020-03-09  Nathan Sidwell  <nathan@acm.org>

	Function-scope using directives
	gcc/cp/
	* cp-gimplify.c (cp_genericize_r): Set DECL_CONTEXT of
	IMPORTED_DECL.
	* module.cc (trees_{in.out}::core_vals): Stream IMPORTED_DECL's
	initial.
	(trees_out::decl_node): IMPORTED_DECLs are always by value.

	Namespace aliases
	gcc/cp/
	* name-lookup.c (do_namespace_alias): Set originating module.
	* module.cc (trees_out::tree_node_bools): Allow namespace aliases.
	(depset::hash::make_dependency): Likewise.
	(depset_hash::add_namespace_entities): Likewise.
	(set_instantiating_module): Likewise.
	gcc/testsuite/
	* g++.dg/modules/ns-alias-1_[abc].C: New.

	gcc/cp/
	* module.cc (trees_{in,out}::vec_chained_decls): New.
	(trees_{in,out}::{read,write}_class_def): Use for fields and vtables.
	gcc/testsuite/
	* g++.dg/modules/vtt-2{,_[ab]}.[hHC]: New.

	gcc/cp/
	* cp-tree.h (get_mergeable_specialization_flags)
	(add_mergeable_specialization): Declare.
	* module.cc (trees_{in,out}::key_mergeable): Stream specialization
	flags and add them as necessary.
	(enum ct_decl_flags): Delete.
	(module_state::{read,write}_cluster): No decl flags.
	(install_specialization): Delete.
	* pt.c (get_mergeable_specialization_flags): New.
	(add_mergeable_specialization): New.
	gcc/testsuite/
	* g++.dg/modules/partial-1{,_[ab]}.[hHC]: New.
	* g++.dg/modules/tpl-spec-5_b.C: Adjust scan.

2020-03-05  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* tree.c (set_array_type_canon): Add dependent parm.
	(build_cplus_array_type, cp_build_qualified_type_real)
	(strip_typedefs): Pass dependent_p on.
	gcc/testsuite/
	* g++.dg/modules/tpl-ary-1.h: Try constifying.

	gcc/cp/
	* cp-tree.h (cplus_build_array_type): Add known-dependent default arg.
	* tree.c (cplus_build_array_type): Only calculate dependent if
	unknown.  Set TYPE_DEPENDENT_P on dependent arys.
	* module.cc (trees_{in,out}::type_node): Serialize dependentness
	of array types.
	gcc/testsuite/
	* g++.dg/modules/tpl-ary-1{,_[ab]}.[hHC]: New.

2020-03-04  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.c (mergeable_class_entities): Check TYPE_LANG_SPECIFIC.

	gcc/cp/
	* module.cc (depset::hash::add_dependency): Only unscoped enum
	usings from the enum itself are mutual dependencies.
	(cluster_cmp): Cope with using decls for the same entity.
	gcc/testsuite/
	* g++.dg/modules/using-7.C: New.

	gcc/cp/
	* module.cc (trees_out::core_vals): Adjust typedef detection.
	(trees_{in,out}::decl_value): Likewise.
	gcc/testsuite/
	* g++.dg/modules/tdef-7{,_[ab]}.[hHC]: New.

	gcc/cp/
	* module.cc (trees__out::key_mergeable): NULL name more often.
	(enum merge_match): Delete.
	(check_mergeable_decl): Use merge_kind instead.
	(trees_in::key_mergeable): Adjust.
	gcc/testsuite/
	* g++.dg/modules/merge-6_b.C: Adjust scan.

	gcc/cp/
	* module.cc (struct merge_key): simplify.
	(trees_{in,out}::key_mergeable): Optimize merge_key streaming.

2020-03-03  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (enum merge_kind): Add more discriminators.
	(merge_kind_name): Adjust.
	(trees_{in,out}::key_mergeable): Partition via new discriminators.
	(trees_in::decl_value): Remove bad formatting.
	(trees_out::get_merge_kind): Select new discriminators.
	(mergeable_namespace_entity, mergeable_class_member): Fold into
	reimplemented key_mergeable.
	gcc/testsuite/
	* g++.dg/modules/merge-[56]_b.C: Adjust scans.

	gcc/cp/
	* module.cc (struct merge_key): Remove index as tree hack ...
	(merge_key::{read,write}): ... here.
	(trees_{in,out}::key_mergeable): Adjust.

	gcc/cp/
	* module.cc (merge_key::read): Remove req qualifier hack.
	(check_mergeable_decl): Use merge_key, not explicit args.
	(mergeable_namespace_entity, mergeable_class_member): Likewise.
	(trees_in::key_mergeable): Adjust.

	gcc/cp/
	* module.cc (trees_{in,out}::decl_container): New.
	(trees_in::key_mergeable): Reimplement, swallowing the merging
	logic of ...
	(trees_in::decl_value): ... this.
	gcc/testsuite/
	* g++.dg/modules/builtin-[13]_a.C: Adjust scans.
	* g++.dg/modules/indirect-[234]_b.C: Likewise.
	* g++.dg/modules/inst-[23]_a.C: Likewise.

	gcc/cp/
	* module.cc (trees_{in,out}::fn_arg_types): Delete.
	(struct merge_key): New.
	(trees_out::key_mergeable): Use merge_key.
	(trees_out::key_mergeable): #ifdef out.
	(trees_in::decl_value): Adjust key handling.

2020-03-02  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.h (mergeable_namespace_entity)
	(mergeable_class_member): Don't declare.
	* name-lookup.c (check_mergeable_decl, mergeable_namespace_entity)
	(mergeable_class_member):  Move to ...
	* module.cc (check_mergeable_decl, mergeable_namespace_entity)
	(mergeable_class_member): ... here.

	gcc/cp/
	* decl2.c (c_parse_final_cleanups): Revert previous change.
	* name-lookup.h (mergeable_{namespace,class}_entities): Declare.
	(add_mergeable_namespace_entity): Declare.
	* name-lookup.c (member_vec_dedup): Link stat_hack chain.
	(check_module_override): Do not use check_mergeable_decl.
	(mergeable_{namespace,class}_entities): New.
	(add_mergeable): Rename to ...
	(add_mergeable_namespace_entitity): ... here.
	(mergeable_{namespace,class}_entity): Use new accessors.

2020-02-28  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (struct note_def_cache_hasher): New type.
	(note_defs): Use it, set GTY((cache)).
	(trees_{in,out}::assert_definition): Adjust.
	(module_state::write, init_module_processing): Adjust note_defs
	construction.

	gcc/cp/
	* module.cc (c_parse_final_c_cleanups): Don't complain about
	unsynthesized defaulted members in a header unit, and pick a
	privileged clone to complain about when we do.
	gcc/testsuite/
	* g++.dg/modules/imp-member-3.H: New.

	gcc/cp/
	* module.cc (trees_(in,out)::fn_arg_types): Serialize ref
	parmness.
	(trees_out::key_mergeable): Adjust.
	* name-lookup.c (check_mergeable_decl): Check ref parmness.
	(mergeable_class_member): __as_base not found via name lookup.
	gcc/testsuite/
	* g++.dg/modules/merge-15{,_[ab]}.[hHC]: New.

	Merge master 9d2d283367a407c1ba9ecdb8590f9295828e25f8

2020-02-27  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::decl_value): FIELD_DECLS can have
	template_info.
	(member_owned_by_class): Likewise.
	gcc/testsuite/
	* g++.dg/modules/merge-14{,_[ab]}.[hHC]: New.

2020-02-26  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* decl.c (build_typename_type): Refactor.
	* module.cc (trees_out::decl_value): Class-scope using-decls are
	like fields.
	(trees_out::key_mergeable): Using-decls are like anonymous fields.
	(trees_{in,out}::{read,write}_class_def): Beware of
	typename_type's TYPE_DECL in the member vec.
	(trees_out::mark_class_def): Mark using-decls.
	(depset::hash::make_dependency): Assert not a class-scope
	using-decl.
	* name-lookup.c (mergeable_class_member): Using-decls can be
	indexed.
	({get,lookup}_field_ident): Using-decls are like fields.
	gcc/testsuite/
	* g++.dg/modules/indirect-2_c.C: Adjust scans.
	* g++.dg/modules/merge-13{,_[ab]}.[hHC]: New.

2020-02-25  Nathan Sidwell  <nathan@acm.org>

	gcc/testsuite/
	* g++.dg/modules/string-1_[ab].[CH]: Enable in c++20 mode.

	gcc/testsuite/
	* g++.dg/modules/merge-12{,_[ab]}.[hHC]: New.

	gcc/cp/
	* typeck.c (structural_comptypes): Deal with TYPE_ARGUMENT_PACK.
	gcc/testsuite/
	* g++.dg/concepts/pack-1.C: New.

	PR c++/93761
	gcc/cp/
	* module.cc (begin_header_unit): New, broken out of ...
	(module_begin_main_file): ... here.  Call it when not
	preprocessed.
	(init_module_processing): Call it when preprocessed.
	gcc/testsuite/
	* g++.dg/modules/preproc-1.C: New.

	gcc/testsuite/
	* g++.dg/modules/atom-decl-2.C: Use dg-prune.
	* g++.dg/modules/atom-pragma-3.C: Likewise.
	* g++.dg/modules/mod-decl-1.C: Likewise.
	* g++.dg/modules/mod-decl-3.C: Likewise.
	* g++.dg/modules/indirect-1_c.C: Remove dg-bogii.
	* g++.dg/modules/part-3_c.C: Likewise.

	Global module constraint merging
	gcc/cp/
	* module.cc (trees_out::decl_value): Always stream constraints.
	(trees_in::decl_value): Likewise, deal with requires in merge key.
	(trees_{in,out}::key_mergeable): Stream requires.
	* name-lookup.c (check_mergeable_decl): Add & check requires.
	(check_module_override): Get requires.
	(mergeable_namespace_entity): Add requires.
	(mergeable_class_member): Likewise.
	(make_namespace_finish): Adjust.
	* name-lookup.h (mergeable_namespace_entity): Add requires.
	(mergeable_class_member): Likewise.
	gcc/testsuite/
	* g++.dg/modules/concept-5{,_[ab]}.[hHC]: New.

2020-02-24  Nathan Sidwell  <nathan@acm.org>

	Implement US033
	gcc/cp/
	* module.cc (import_module): Check language-linkage depth.
	* parser.c (cp_parser_import_declaration): Check if direct
	language linkage.
	gcc/testsuite/
	* g++.dg/modules/inc-xlate-1_d.C: Delete.
	* g++.dg/modules/lang-1_[abc].[HC]: New.
	* g++.dg/modules/lang-2_[ab].C: New.

	Merge master 3841739c29a54c0141c3156cdd47891c258b2b88

2020-02-22  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* lex.c (cpp_directives_only): Commonize ' & " peeking, add
	cpp-number vs raw-string detection.
	gcc/testsuite/
	* c-c++-common/cpp/dir-only-7.c: Add test.

2020-02-19  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* lex.c (cp_directive_only_process): Deal with raw strings by
	backtracking.

2020-02-14  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* lex.c (cpp_directive_only_process): Cope with number
	punctuators.
	gcc/testsuite/
	* c-c++-common/cpp/dir-only-8.c: New.

2020-02-12  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* Make-lang.in (MODULE_REVISION): Add branch name.

2020-02-11  Nathan Sidwell  <nathan@acm.org>

	gcc/c-family/
	* c-opts.c (c_finish_options): Builtins & command-line starts at
	1.
	(cb_file_change): Alter detection of main file start.
	* c-ppoutput.c (print_line_1): Don't nadger line zero.
	gcc/testsuite/
	* g++.dg/modules/dir-only-3.C: Update line nos
	* g++.dg/modules/dir-only-4.C: New.

	gcc/c-family/
	* c-optsc (c_common_post_options): Set module_directives
	regardless of preprocessed state.
	gcc/cp/
	* parser.c (cp_parser_skip_to_pragma_eol): Don't explode on
	meeting actual EOF.
	gcc/testsuite/
	* g++.dg/modules/dir-only-3.C: New.

	Merge master a6ee556c7659877bb59b719f11ca2153e86ded59

2020-02-10  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	lex.c (do_peek_prev): New.
	(cpp_directive_only_process): Peek backwards from 'R' to check it
	is a raw literal.
	gcc/testsuite/
	* c-c++-common/cpp/dir-only-7.c: Extend.

2020-02-08  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	lex.c (_cpp_lex_direct): PRAGMA_EOL is never pre-padded.
	(cpp_directive_only_process): Emit line marker after module
	control-line.
	gcc/
	* langhooks.h (struct lang_hooks): Add PT_flags enum.
	gcc/c-family/
	* c-ppoutput.c (token_streamer): Add begin_pragma.
	(token_streamer::stream): Remove out-of-pragma EOL procesing.
	Ignore pragma_eol location.
	(scan_translation_unit): Pay attention to filter return flags.
	(directives_only_cb): Likewise.
	gcc/cp/
	* lex.c: Inlude langhooks.
	(coro::resume): Return pragma begin flag.
	gcc/testsuite/
	* g++.dg/modules/dir-only-2_b.c: Add broken line check.

	gcc/
	* langhooks (struct lang_hooks): preprocess_token takes and
	returns a uintptr_t.
	gcc/cp/
	* cp-tree.h (module_token_{pre,cdtor,lang}): Change cookie type.
	* lex.c  (module_token_{pre,cdtor,lang}): Change cookie type.
	* parser.c (cp_lexer_new): Likewise.
	gcc/c-family/
	* c-ppoutput.c (scan_translation_unit): Adjust lang hook use.
	(class do_streamer): Likewise.
	(scan_translation_unit_directives_only): Likewise.

2020-02-08  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* lex.c (cpp_directive_only_process): Relax raw string detection.

2020-02-07  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* lex.c (cpp_directive_only_process): Re-reimplement.

	libcpp/
	* lex.c (cpp_maybe_module_directive): Use 'module control-line'
	here ...
	gcc/cp/
	* parser.c (cp_parser_diagnose_invalid_type_name): ... here ...
	(cp_parser_import_declaration): ... and here.

	libcpp/
	* internal/cpplib.h (cpp_clear_if_stack): Don't declare.
	* directives.c (cpp_clear_if_stack): Delete.

	Merge master 82aee6dd61e2a5b4e4b124f896c8403169688f41

	-fdirectives-only (a bit buggy)
	gcc/c-family/
	* c-ppoutput.c (token_streamer::stream): Adust PRAGMA_EOL.
	(class_do_streamer): New.
	(directives_only_cb): Extend for token streaming.
	(scan_translation_unit_directives_only): Pay attention to
	preprocess lang_hook.
	(print_line_1): Ignore UNKNOWN_LOCATIONs.
	libcpp/
	* include/cpplib.h (cpp_directives_only): Add cpp_reader to
	callback.
	* lex.c (do_peek_{backslash,next,ident,module): New.
	(cpp_directive_only_preprocess): Add module peeking.
	gcc/testsuite/
	* g++.dg/modules/dir-only-2_[ab].[CH]: New.

	gcc/c-family/
	* c-ppoutput.c (class token_streamer): New class, swallow guts of
	...
	(scan_translation_unit): ... this.  Use it.

2020-02-06  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* include/cpplib.h (enum CPP_DO_task): New.
	(cpp_directive_only_process): Adjust prototype.
	* lex.c (cpp_directives_only_process): Take data pointer and
	generic callback, adjust.
	gcc/c-family/
	* c-ppoutput.c (print_lines_directives_only): Replace with ...
	(directives_only_cb): ... this new function.
	(scan_directive_only_preprocess): Adjust call.

	libcpp/
	* lex.c (cpp_directive_only_process): Simplify raw string lexing.

	libcpp/
	* lex.c (cpp_directive_only_process): Add raw string lexing.
	gcc/testsuite/
	* c-c++-common/cpp/dir-only-7.c: New.

2020-02-05  Nathan Sidwell  <nathan@acm.org>

	Merge master fa0c6e297b22d5883857d0db4a6a8be0967cb16f

	libcpp/
	* directives-only.c: Delete.
	* Makefile.in: Remove it.
	* include/cpplib.h (cpp_directives_only_process): Declare.
	* internal.h (struct _cpp_dir_only): Delete.
	(_cpp_preprocess_dir_only): Delete.
	* lex.c (cpp_directive_only_process): New implementation.
	gcc/c-family/
	* c-ppoutput.c (print_lines_directive_only): lines is unsigned.
	(scan_translation_unit_directives_only): Reimplement.
	gcc/testsuite/
	* gcc.dg/cpp: Move directives-only tests to ...
	* c-c++-common/cpp: ... here.

2020-02-04  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* parser.c (cp_parser_import_declaration): Be stricter about preamble.
	gcc/testsuite/
	g++.dg/modules/atom-decl-2.C: Adjust diagnostics.
	g++.dg/modules/atom-pragma-3.C: Likewise.
	g++.dg/modules/exp-xlate-1_b.C: Likewise.
	g++.dg/modules/inc-xlate-1_e.C: Likewise.
	g++.dg/modules/atom-preamble-2_f.C: New.

	gcc/cp/
	* module.cc (preprocess_module): Don't load header unit if not
	preprocessing.  Always close and reopen the line map spans.
	libcpp/
	* include/cpplib.h (cpp_get_options, cpp_get_callbacks)
	(cpp_get_deps): Mark as PURE.

	gcc/cp/
	* module.cc (module_state::do_import): Drop deps handling here.
	(preprocess_module): Mark interface.
	(preprocessed_module): Correct dependency generation.
	(finish_module_processing): Drop deps handling here.
	libcpp/
	* mkdeps.c (make_write): Note Make 4.3's &: targets

	gcc/cp/
	* module.cc (MODULE_UNKNOWN_PARTITION): Delete.
	(module_state::read_imports): Drop special partition detection.
	(module_state::read_partitions): Drop special partition setting.
	(module_translate_include): Use main_source_loc for mapper.
	({init,fini}_module_processing): Likewise.

	gcc/cp/
	* lex.c (module_token_cdtor): Call preprocessed_module on
	teardown here ...
	* parser.c (cp_lexer_new_main): ... not here.
	* module.cc (struct module_state): Drop from_loc.  Use loc in most
	places.
	(module_state::{maybe_create_loc,attach,is_detached): Delete.
	(module_state::is_rooted): New.  Use it in place of is_detached.
	(module_state::imported_from): New.
	(module_state::do_import): Create module loc here ...
	(direct_import): ... not here ...
	(preprocess_module): ... or here.
	(import_module): Reparent here.
	(module_cpp_undef): Check flag_header_unit.
	(module_begin_main_file): Do not declare_module here ...
	(preprocessed_module): ... do it here.

	gcc/cp/
	* module.cc (module_state::direct_import): Delete.
	(module_state::do_import): Only ever do initial read.
	(direct_import): New non-member fn.
	({import,declare}_module): Call it.
	(preprocess_module): Call do_import.

	gcc/cp/
	* module.cc (struct module_state): Cleanly separate module kind
	flags from module use flags.

2020-02-03  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (struct module_state): Drop primary_p &
	from_partition_p.  Map uses to module_p and partition_direct_p.

	gcc/cp/
	* module.cc (struct module_state): Add load_state, not flags.
	Remove imported_p, lazy_{preprocessor,language}_p.
	(module_state::read_{imports,preprocessor,language}): Adjust.
	(module_state::{check_read,{do,direct}_import}): Adjust.
	({declare,preprocess}_module): Adjust.

	gcc/cp/
	* cp-tree.h (module_normal_import_p): Delete.
	* module.cc (struct module_state): Rationalize flags.
	(module_normal_import_p): Delete.
	(module_state::direct_import): Don't save and restore line state
	here.
	(import_module): Just for language.
	(preprocess_module): Save line state here.
	* parser.c (cp_parser_import_declaration): Adjust.
	(cp_parser_declaration_seq_opt): Drop superflous pragma parsing.

	gcc/cp/
	* parser.c (cp_parser_import_declaration): Diagnose include
	translation in purview.  Emit not about module-directive control lines.
	gcc/testsuite/
	* g++.dg/modules/inc-xlate-1_e.C: New.

2020-02-02  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* internal.h (struct spec_nodes): Transpose n_modules array.
	* init.c (post_options): Adjust n_modules array access.
	* lex.c (cpp_maybe_module_directive): Remove supurfluous state and
	laziness.
	gcc/
	* module.cc (module_translate_include): Add __translated attribute.
	* parser.c (cp_parser_translation_unit): Move translated
	diagnostic to ...
	(cp_parser_import_declaration): ... here.  Still disabled.
	(cp_parser_module_export): Check for following module directive.
	gcc/testsuite/
	* g++.dg/modules/exp-xlate-1_b.C: Remove xfail, adjust errors.
	* g++.dg/modules/inc-xlate-1_b.H: Adjust final scans.
	* g++.dg/modules/legacy-[35]_[bcd].[CH]: Adjust final scans.

2020-01-31  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* include/cpplib.h (NODE_MODULE): New.
	(struct cpp_hashnode): Reserve another flag bit.
	* internal.h (struct spec_nodes): Replace separate module spec
	nodes by array.
	(_cpp_setup_module_directive): Delete.
	* init (post_options): Adjust module node initialization.
	* directives.c (_cpp_setup_module_directive): Delete, move into ...
	* lex.c (cpp_maybe_module_directive): ... here.  New, absorb
	peeking from ...
	(_cpp_lex_token): ... here.  Call it.

	Merge master b92709388b9aee52db3cd7c227818e0ecccda2e5

	gcc/cp/
	* parser.c (cp_parser_skip_to_end_of_statement): Adjust pragma
	skipping.
	(cp_parser_skip_to_end_of_block_or_statement): Likewise.

	Fix PRAGMA_EOL location
	libcpp/
	* lex.c (_cpp_lex_direct): Return CPP_PRAGMA_EOL at end of line.
	gcc/cp/
	* lex.c (token_coro::resume): No need to handle in-pragma EOF.
	* parser.c (cp_parser_skip_to_pragma_eol): Likewise.
	(cp_parser_omp_declare_simd, cp_parser_omp_declare_reduction)
	(cp_parser_oacc_routine, cp_parser_initial_pragma, pragma_lex): Likewise.
	gcc/c-family/
	* c-ppoutput.c (scan_translation_unit): Ignore CPP_PRAGMA_EOL in
	not a pragma.
	gcc/testsuite/
	* c-c++-common/cpp/pragma-eof.c: New.

	Implement p1857, part 3
	gcc/cp/
	* cp-tree.h (module_preprocess, import_module_pre): Replace with ...
	(preprocess_module): ... this.
	(import_module_lang): Replace with ...
	(import_module): ... this.
	(preprocessed_module): Declare.
	(process_deferred_imports): Delete.
	* lex.c (struct token_coro): Report via preprocess_module.
	(module_token_pre): Call preprocessed_module on teardown.
	* module.cc (module_state::module_p): New flag.
	(main_source_loc): New.
	(pending_imports): Delete.
	(module_state::direct_import): Do not get filename here.
	(import_module_lang): Replace with ...
	(import_module): Drop attach logic.
	(declare_module): Adjust.
	(module_preprocess, import_module_pre): Replace with ...
	(preprocess_module): ... this.  Do attach logic here.
	(preprocessed_module): New.  Do deps and module server name comms.
	(process_deferred_imports): Delete.
	* parser.c (cp_lexer_new_main): Call preprocessed_module when
	done.
	(cp_parser_translation_unit): Drop deferred imports logic.
	(cp_parser_import_declaration): Adjust.
	gcc/testsuite/
	* g++.dg/modules/atom-preamble-2_d.C: Remove xfail.
	* g++.dg/modules/bad-mapper-1.C: Adjust diagnostic loc.
	* g++.dg/modules/bad-mapper-2.C: Likewise.
	* g++.dg/modules/bad-mapper-3.C: Likewise.
	* g++.dg/modules/map-2.C: Likewise.

2020-01-30  Nathan Sidwell  <nathan@acm.org>

	Implement p1857, part 2
	libcpp/
	* include/line-map.h (linemap_module_reparent): Declare.
	* line-map.c (linemap_module_reparent): New.
	gcc/cp/
	* cp-lang.c (LANG_HOOKS_PREPROCESS_TOKEN): Adjust.
	* cp-tree.h (module_preprocess_token): Rename to ...
	(module_token_pre): ... here.
	(module_token_{cdtor,lang}): Declare.
	(module_map_header): Delete.
	(module_preprocess): Adjust parameters.
	(import_module): Delete, replace with ...
	(import_modile_{pre,lang}): ... these.
	(declare_module): Return void.
	* lex.c (struct token_coro): New, broken out of ...
	(module_preprocess_token): ... here.  Replace with ...
	(module_token_{pre,lang,cdtor}): ... these.
	* module.cc (module_state::read_location): Deal with early-read
	partition locations.
	(module_state::direct_import): Always preserve line map.  Take
	for_cpp arg.
	(import_module): Break into ...
	(import_module_{pre,lang}): ... these.  Disable pending imports.
	(declare_module): Adjust.
	(module_map_header): Delete.
	(module_preprocess): Do not change module array.  Return primary
	module.
	* parser.c (cp_lexer_tokenize): Delete.
	(cp_lexer_new_main): New, resurrected from trunk.  Tokenize the
	whole buffer.  Call the token coro.
	(cp_parser_skip_to_closing_parenthesis_1): Deal with falling into
	a module pseudo-pragma.
	(cp_parser_skip_to_end_of_{,block_or_}statement): Likewise.
	(cp_parser_translation_unit): Drop the incremental tokenization.
	(cp_parser_module_name): Drop KIND parameter.
	(cp_parser_module_directive_end): New.
	(cp_parser_{import,module}_declaration): Adjust.
	(cp_parser_declaration): Deal with (badly placed) import or module
	declarations.
	(cp_parser_toplevel_declaration): Restore PRAGMA parsing.
	(c_parse_file): PCHness handled in cp_lexer_new_main, use it.
	gcc/testsuite/
	* g++.dg/modules/atom-decl-2.C: Adjust expected error
	* g++.dg/modules/atom-pragma-3.C: Likewise.
	* g++.dg/modules/exp-xlate-1_b.C: Likewise.
	* g++.dg/modules/mod-decl-1.C: Likewise.
	* g++.dg/modules/p0713-2.C: Likewise.
	* g++.dg/modules/p0713-3.C: Likewise.
	* g++.dg/modules/atom-preamble-2_d.C: Temporary XFAIL
	* g++.dg/modules/unnamed-1_b.C: Adjust output scan

	gcc/cp/
	* parser.c (cp_lexer_alloc): Remove pch finalizing.
	(cp_parser_skip_to_closing_parenthesis_1): Deal with falling into
	a CPP_PRAGMA.
	(cp_parser_skip_to_end_of_{,block_or_}statement): Likewise.
	(cp_parser_skip_to_pragma_eol): Don't consume CPP_EOF.
	(cp_parser_new): Take a lexer, don't create it here.
	(cp_parser_declaration): Just point at peeked tokens, don't copy.
	(cp_parser_block_declaration): Likewise.
	(cp_parser_initial_pragma): Don't get the first token.
	(c_parse_file): Do it here, and finalize pch.

	libcpp/
	* lex.c (_cpp_lex_direct): Set location of PRAGMA_EOL.
	gcc/testsuite/
	* g++.dg/modules/exp-xlate-1_b.C: Add xfailed bogus-error.
	* g++.dg/modules/cpp-2_c.C: Adjust output scan.
	* g++.dg/modules/cpp-5_c.C: Likewise.
	* g++.dg/modules/legacy-3_b.H: Likewise.
	* g++.dg/modules/legacy-3_c.H: Likewise.
	* g++.dg/modules/legacy-6_c.C: Likewise.
	* g++.dg/modules/legacy-6_d.C: likewise.

2020-01-27  Nathan Sidwell  <nathan@acm.org>

	gcc/
	* langhooks.h (preprocess_token): Take a const cpp_token pointer.
	gcc/c-family/
	* (c-ppoutput.c (scan_translation_unit): Preprocess lang hook
	doesn't alter the token.

	gcc/cp/
	* cp-tree.h (module_preprocess_token): Take const cpp_token
	pointer.
	* lex.c (module_preprocess_token): Take const cpp_token.

2020-01-24  Nathan Sidwell  <nathan@acm.org>

	Merge master a1f6eff20e3bb32c5051e77093ee28faec2abca0

	gcc/c-family/
	* c-common.h (enum rid): Remove non-underbarred module RIDs.
	* c-common.c (c_common_reswords): Remove non-underbarred module keywords.
	gcc/cp/
	* lex.c (init_reswords): Module keywords are keywords.
	* parser.c (cp_lexer_tokenize): Look for keywords.
	(cp_parser_translation_unit): Likewise.
	gcc/testsuite/
	* g++.dg/modules/exp-xlate-1_b.C: Remove bogus xfail.

2020-01-23  Nathan Sidwell  <nathan@acm.org>

	libcpp/
	* expr.c (parse_defined): Fixup for modules.
	(parse_has_include): Remove controlling macro nonsense.

	Implement p1857, part 1
	libcpp/
	* internal.h (struct lexer_state): Add directive_file_token field.
	(struct spec_nodes): Add module directive nodes.
	(_cpp_setup_module_directive): Declare.
	* include/cpplib.h (struct cpp_options): Add module_directives field.
	* directives.c (_cpp_setup_module_directive): New.
	* init.c (post_options): Provess module_directives option.
	* lex.c (_cpp_lex_token): Add module directive handling.
	* macro.c (cpp_get_token_1): Add directive_file_token handling.
	gcc/cp/
	* lex.c (module_preprocess_token): Reimplement.
	* parser.c (cp_lexer_tokenize): Module lines end in
	CPP_PRAGMA_EOL.
	(cp_lexer_not_macro): Delete.
	(cp_parser_module_directive_end): New.
	(cp_parser_diagnose_invalid_typename): Adjust.
	(cp_parser_translation_unit): Adjust.
	(cp_parser_{module,import}_declaration): Adjust.
	gcc/c-family/
	* c-common.h (enum rid): Add RID__MODULE and co.
	* c-common.c (c_common_reswords): Add __module and co.
	* c-lex.c (c_lex_with_flags): Adjust CPP_HEADER_NAME handling.
	* c-opts.c (c_common_post_options): Set module_directives option.
	gcc/testsuite/
	* g++.dg/modules/anon-2_b.C: Adjust error/scans.
	* g++.dg/modules/atom-preamble-1.C: Likewise.
	* g++.dg/modules/atom-preamble-3.C: Likewise.
	* g++.dg/modules/cpp-2_c.C: Likewise.
	* g++.dg/modules/cpp-5_b.C: Likewise.
	* g++.dg/modules/cpp-5_c.C: Likewise.
	* g++.dg/modules/dep-2.C: Likewise.
	* g++.dg/modules/keyword-1_b.C: Likewise.
	* g++.dg/modules/legacy-3_b.H: Likewise.
	* g++.dg/modules/legacy-3_c.H: Likewise.
	* g++.dg/modules/legacy-6_c.C: Likewise.
	* g++.dg/modules/legacy-6_d.C: Likewise.
	* g++.dg/modules/mod-decl-0-2a.C: Likewise.
	* g++.dg/modules/mod-decl-0.C: Likewise.
	* g++.dg/modules/mod-decl-1.C: Likewise.
	* g++.dg/modules/mod-decl-3.C: Likewise.
	* g++.dg/modules/token-1.C: Likewise.
	* g++.dg/modules/token-2_b.C: Likewise.
	* g++.dg/modules/token-3.C: Likewise.
	* g++.dg/modules/token-4.C: Likewise.
	* g++.dg/modules/exp-xlate-1_b.C: XFAIL
	* g++.dg/modules/inc-xlate-1_d.C: XFAIL

2020-01-21  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (slurping::remap_module): Return unsigned, use zero
	for error case.
	(trees_in::tree_node): Adjust.
	(module_state::read_{namespace,pendings}): Likewise.
	(module_state::read_{preprocessor,language}): Likewise.

	gcc/cp/
	* modules.cc (struct module_state): Add
	lazy_{preprocessor,language}_p fields.
	(module_state::read): Delete, move into do_import.
	(module_state::read_preprocessor): Be idempotent. Read direct
	imports here.  Set header bitmap bits.
	(module_state::read_language): Likwise, set import/export bits.
	(module_state::check_read): Adjust file closing condition.
	(module_state::set_import): Do not deal with header bitmaps here.
	(module_state::do_import): Do the initial read (only) here.
	(module_state::direct_import): Do the preprocessor and language
	reading here.

	gcc/cp/
	* modules.cc (slurping::remap_module): Encode import directness in
	remap array.
	(module_state::read_imports): Adjust.
	(module_state::read_initial): Likewise.

2020-01-20  Nathan Sidwell  <nathan@acm.org>

	Merge master 3a43459715e239fb8043bf64b830aaf1a9802180.
	Coroutines committed.

2020-01-17  Nathan Sidwell  <nathan@acm.org>

	Merge master bf09d886a4be1031f7003073115af6cbc5575353.

2020-01-16  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (module_state::write_macros): Always write a set of
	defs.
	(module_state::read_macros): Adjust.
	(module_state::read): Only read preprocessor for header unit.
	(module_state::read_preprocessor): Assert am header.

	gcc/cp/
	* module.cc (module_state::{read,write}_counts): New.  Broken out
	of ...
	(module_state::{read,write}_config): ... here.
	(enum module_state_counts): New.
	(module_state::write_cluster): Take lwm,hwm pair.
	(module_state::read_{bindings,entities,inits}): Adjust.
	(module_state::write): Write counts.
	(module_state::read_{preprocessor,language}): Read counts.

	gcc/cp/
	* module.cc (slurping::slurping): Set current to ~0u.
	(module_state::read_{initial,preprocessor,language}): New, broken
	out of ...
	(module_state::read): ... here.  Call them.

2020-01-15  Nathan Sidwell  <nathan@acm.org>

	Merge master.
	gcc/cp/
	* module.cc (depset::traits): Add empty_zero_p.

2020-01-13  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* Make-lang.in (MODULE_REVISION): SVN's dead, man.

2020-01-10  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r280131.
	Bye bye SVN, I'm sure the farm upstate will be fine.

2020-01-06  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r279868.

2020-01-03  Nathan Sidwell  <nathan@acm.org>

	Header unit deduplication milestone
	gcc/testsuite/
	* g++.dg/modules/string-1_{a.H,b.C}: New.

	gcc/cp/
	* module.cc (trees_in::decl_value): Disambiguate entity_ary slots
	from entuty_hash slots.
	(trees_out::get_merge_kind): Check of
	uninstantiated_template_friend even when there's a depset.

	gcc/cp/
	* module.cc (trees_in::tree_value): Return existing.
	gcc/testsuite/
	* g++.dg/modules/merge-11{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (trees_out::get_merge_kind): Detect bitfield storage
	unit.
	(trees_out::key_mergeable): Deal with anonymous bitfields.
	* name-lookup.c (mergeable_class_member): Likewise.
	gcc/testsuite/
	* g++.dg/modules/merge-10{.h,_a.H,_b.C}: New.

	gcc/
	* tree.h (DECL_ALIGN_RAW): New, use it in accessors.
	(DCL_WARN_IF_NOT_ALIGN): Likewise.
	gcc/cp/
	* cp-tree.h (CPTI_CONST_TYPE_INFO_TYPE,CPTI_TYPE_INFO_PTR_TYPE):
	Move to after module hwm.
	* module.cc (trees_out::write_class_def): Don't write empty thunk
	lists.
	(trees_in::read_class_def): Merge fields from a duplicate.
	gcc/testsuite/
	* g++.dg/modules/tinfo-2_{a.h,b.C}: New.
	* g++.dg/modules/member-def-1_c.C: Adjust scan.
	* g++.dg/modules/merge-9.h: Add another builtin.

	gcc/cp/
	* module.cc (module_state::read_cluster): Set cfun->returns_struct
	approprately.

	gcc/cp/
	* module.cc (import_entity_module): Cope with exported entities.

2020-01-02  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (CPTI_ALIGN_TYPE): Not a global tree.
	gcc/testsuite/
	* g++.dg/modules/merge-9{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (nodel_decl_hash): Rename to ...
	(duplicate_hash): ... here.  Allow binfos.
	(trees_{in,out}::binfo_mergeable): New.
	(trees_{in,out}::tree_node): Use it for tt_binfo.
	(trees_{in,out}::tree_value): Use to dedup binfos.
	gcc/testsuite/
	* g++.dg/modules/merge-8{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (trees_{in,out}::tree_binfo): Delete.
	(trees_{in,out}::tree_node): Use binfo chain to find binfo.

	Merge trunk r279811.
	Update all the years!

	Merge trunk r279809.
	That's 2019 done.

	Merge trunk r279556.
	gcc/
	* diagnostic-core.h (progname): Resolve conflict.

	Merge trunk r279555.

	Merge trunk r279473.

	Apply trunk r279473.
	gcc/cp/
	* constexpr.cc (check_constexpr_fundef): Clear non-potential
	result before registering.

	Merge trunk r279472.

2019-12-19  Nathan Sidwell  <nathan@acm.org>

	Typeof merging
	gcc/cp/
	* ptree.c (cxx_print_type): Print TYPEOF_TYPE & BASES types.
	* typeck.c (structural_comptypes): Add TYPEOF_TYPE.
	gcc/testsuite/
	* g++.dg/modules/merge-7{.h,_a.H,_b.C}: New.

	Anonymous templates are a thing.
	gcc/cp/
	* module.cc (trees_out::key_mergeable): Deal with anon templatey
	members.
	* name-lookup.c (mergeable_class_member): Likewise.
	gcc/testsuite/
	* g++.dg/modules/merge-6{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (trees_in::decl_value): Fix enum-context merging.
	gcc/testsuite/
	* g++.dg/modules/merge-5{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (trees_out::key_mergeable): Fix indentation.

	gcc/cp/
	* name-lookup.c (mergeable_class_member): Get to class template
	correctly.
	gcc/testsuite/
	* g++.dg/modules/merge-4{.h,_a.H,_b.C}: New.

	gcc/cp/
	* module.cc (trees_in::install_implicit_member): Fix parm type thinko.
	gcc/testsuite/
	* g++.dg/modules/imp-member-1_a.C: Fix scan.
	* g++.dg/modules/imp-member-2_[abc].C: New.

2019-12-18  Nathan Sidwell  <nathan@acm.org>

	Installation of implicit member fns.
	gcc/cp/
	* module.cc (trees_in::install_implicit_member): New.
	(trees_in::decl_value): Implicit member functions may be dups.
	Call install_implicit_member.
	gcc/testsuite/
	* g++.dg/modules/imp-member-1_[abcde].C: New.

2019-12-17  Nathan Sidwell  <nathan@acm.org>

	Out-of-class member function definitions
	gcc/cp/
	* decl.c (begin_function_body): RAII.
	* lex.c (cxx_dup_lang_specific): Clear IMPORT_P and PARTITION_P.
	* module.cc (module_state::is_matching_decl): Add inner parm.
	Propagate inline & externalness.
	(module_state::write): Read all partition entities.
	* parser.c (cp_parser_function_definition_after_decl): Set
	defining module as appropriate.
	gcc/testsuite/
	* g++.dg/modules/member-def-2_[abcd].C: New.

	Out-of-class member class definitions
	gcc/cp/
	* cp-tree.h (DECL_MODULE_PENDING_MEMBERS_P): New.
	(lang_decl_base): Add module_pending_members_p.
	(lazy_load_members): Declare.
	* module.cc (depset::entity_kind): Add EK_INNER_DECL.
	(depset::disc_bits): Add DB_IS_MEMBER_BIT.
	(depset::is_member): New.
	(module_state::write_cluster): Take ref to module_state_config.
	Adjust.
	(module_state::{read,write}_specializations): Rename to ...
	(module_stte::{read,write}_pendings): Generalize to pending
	members.
	(trees_in::decl_val): Deal with pending members.
	(depset::hash::make_dependency): Adjust for EK_INNER_DECL.
	(depset::hash::add_class_entities): Add them.
	(struct module_state_config): Rename num_specializations ->
	num_pendings.  Adjust throughout.
	(module_state::read_entities): Shift snum another bit.
	(module_sttate::lazy_load): Likewise.
	(lazy_load_members): New.
	* name-lookup.c (maybe_lazily_declare): Load pending members.
	gcc/testsuite/
	* g++.dg/modules/member-def-1_[abcd].C: New.

	gcc/cp/
	* cp-tree.h (set_defining_module): New.
	* decl.c (xref_tag_1): Check can redeclare, set instantiating
	module.
	(start_enum): Likewise.
	* module.c: Update doc preamble.
	(module_may_redeclare): Get to the template.
	(set_defining_module): New, broken out of ...
	(set_instantiating_module): ... here.  DO NOT CALL IT.
	* rtti.c (init_rtti_processing): "type_info" has exportedness.
	* semantics.c (begin_class_definition): Check can redeclare.  Set
	defining & instantiating.
	gcc/testsuite/
	* g++.dg/modules/friend-5_[ab].C: New.
	* g++.dg/modules/tdef-4_[bc].C: Add comments.

2019-12-13  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r279384.

	gcc/cp/
	* module.cc: Rename specset to pendset.  Document.

	Pending specializations keyed by ident
	gcc/cp/
	* cp-tree.h (DECL_TEMPLATE_LAZY_SPECIALIZATIONS_P): Delete.
	(MODULE_VECTOR_LAZY_SPEC_P): Delete.
	(MODULE_VECTOR_PENDING_{SPECIALIZATIONS,IS_HEADER,IS_PARTITION}_P): New.
	(DECL_MODULE_PENDINGSPECIALIZATIONS_P): New.
	(lang_decl_base): Add module_specializations_p.
	(lazy_specializations_p): Declare.
	* name-lookup.h (note_pending_specializations): No return value.
	(load_pending_specializations): Declare.
	(note_loaded_specializations): Delete.
	* module.cc (specset): Key is entity ident.  Adjust throughout.
	(trees_in::decl_value): Deal with pending specializations.
	(specset::lazy_load): Deal with indirections.
	(module_state::{read,write}_specializations): Reimplement.
	(lazy_specializations_p): New.
	(lazy_load_specializations): Reimplement.
	* name-lookup.c (mark_pending_on_{decl,binding}): Delete.
	(set_module_binding): Drop lazy specialization tagging here.
	(note_pending_specializations): Reimplement.
	(load_pending_specializations): New.
	(note_loaded_specializations): Delete.
	* pt.c (lookup_template_class_1): Reimplement lazy specialization
	loading.
	(instantiate_template_1): Likewise.
	gcc/testsuite/
	* g++.dg/modules/inst-4_[ab].C: Adjust scans.
	* g++.dg/modules/tpl-spec-[12345]_[abcd].C: Likewise.

	gcc/cp/
	* cp-tree.h (DECL_MODULE_ENTITY_P): New.
	(lang_decl_bas): Add module_entity_p flag.
	* module.cc (trees_in::decl_value): Insert according to
	DECL_MODULE_ENTITY_P.
	* lex.c (cxx_dup_lang_specific): Clear DECL_MODULE_ENTITY_P.

2019-12-12  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (class specset): Make ns an mc_slot.
	(specset::hash::add): Adjust.
	(specset::hash::lookup): Rename to ...
	(specset::hash::extract): ... here.  Adjust.
	(specset::lazy_load): New.
	(module_state::read_entities): Adjust lazy setting.
	(module_state::read_specializations): Adjust hash table adding.
	(lazy_load_binding): Reorder dump stacking.
	(lazy_load_specializations): Likewise, call specset::lazy_load.

	gcc/cp/
	* cp-tree.h (DECL_MODULE_PARTITION_P): Update doc.
	* module.cc (trees_in::decl_value): Only set
	DECL_MODULE_PARTITION_P when primary interface.

	gcc/cp/
	* decl.c (lookup_and_check_tag): Refactor.

	gcc/cp/
	* module.cc (import_entity_index): Use different fail value.
	(dumper::impl::nested_name): Don't explode on bad import indices.
	(module_state::write): Adjust.
	gcc/testsuite/
	* g++.dg/modules/part-4_[abc].C: New.

2019-12-06  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (maybe_strip_cmi_prefix): Simplify.

	gcc/cp/
	* module.cc (trees_out::key_mergeable): Remove unreachable code.

	gcc/cp/
	* module.cc (enum tree_tag): Delete tt_friend_template.
	(trees_out::decl_node): Uninstantiated template friends are not
	special.
	(trees_in::tree_node): Delete tt_friend_template handling.
	(trees_{in,out}::{read,write}_class_def): No need to stream
	template friends specially.
	(trees_out::mark_class_def): No need to mark class_def members.
	(depset::hash::make_dependency): Do not confuse uninstantiated
	template friends with scope members.
	gcc/testsuite/
	* g++.dg/modules/tpl-friend-2_a.C: Adjust scan.

	gcc/cp/
	* module.cc (trees_out::mark_class_def): No need to mark friend
	specializations.

	gcc/cp/
	* decl.c (duplicate_decls): Just zap the template's module info.
	* pt.c (build_template_decl): No need to copy false module info.
	(tsubst_tenplate_decl): Just zap the template's module info.

	gcc/cp/
	* module.cc (trees_out::decl_{node,value}): Remove cluster biasing.
	(depset::hash::make_dependency): Likewise.
	(module_state::write_{cluster,{namespace{,s}}): Likewise.
	(module_state::write_{entities,specializations}): Likewise.
	(module_state::write): Likewise.

	(gcc/cp/
	* module.cc (trees_out::decl_value): No need to look for dep again.

	gcc/cp/
	* module.cc (trees_out::decl_node): Get entity index & origin from
	the depset.
	(depset::hash::make_dependency): Stash the importing index &
	origin in the depset.
	(module_state::write_namespace): Get index & origin from the depset.

	Structured bindings, c++2a libstdc++ is back working
	gcc/cp/
	* module.cc (trees_{in,out}::lang_decl_{bools,vals}): Handle
	lds_decomp.
	gcc/testsuite/
	* g++.dg/modules/decomp-1_[ab].C: New.

	Merge trunk r279023.
	libstdc++ c++2a is now using structured bindings, and those don't
	work :(

2019-12-05  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (depset::hash::add_namespace_context): New.
	(trees_out::decl_node): Use it for namespace.
	(depset::hash::make_dependency): Likewise for discovered GMF.
	(depset::hash::add_binding): Use it.
	(depset::tarjan::connect): Make sure we don't wander into imports.
	(depset::hash::connect): Don't add imports to the graph.
	(module_state::write_namespace{,s}): Never meet global namespace.
	(module_state::write_entries): Handle namespace entries
	separately.
	(module_state::write): Reorganize cluster traversals.

	gcc/cp/
	* module.cc (depset::hash::add_dependency): Do not depend on
	imports.
	(depset::tarjen::connect): Assert more.
	(depset::hash::connect): Add less.
	(module_state::write): Fewer cases.
	gcc/testsuite/
	* g++.dg/modules/vmort-2_b.C: Invert scan test.

	gcc/cp/
	* module.cc (depset::{make,add}_dependency): Drop is_import parm,
	update all callers.
	(will_be_import): Delete.
	(trees_out::decl_node): Determine will be import locally.
	(depset::make_dependency): Likewise.

	gcc/cp/
	* cp-tree.h (DECL_MODULE_PARTITION_P): New.
	(lang_decl_base): Add module_partition_p.
	* decl.c (duplicate_decls): Adjust.
	* pt.c (build_template_decl, tsubst_template_decl): Adjust.
	* module.cc (will_be_import): Assert consistency.
	(trees_in::decl_value): Set module_partition_p.
	(depset::hash::make_dependency): Assert consistency.
	(set_instantiating_module): Clear it.

	One Beellion Modules!
	gcc/cp/
	* cp-tree.h (lang_decl_base): Replace module_origin field with
	module_import_p flag.
	* modules.cc (MODULE_UNKNOWN{,_PARTITION}): Adjust.
	(MODULE_LIMIT): Delete.
	(module_state): Make mod & remap unsigneds.
	(module_state::read): No need to check module overflow.

	gcc/cp/
	* module.cc (macro_import::slot) Adjust encoding to use fewer
	bits.
	(macro_import::append): Add defness parm.
	(macro_import::exported): Always make definition.
	(maybe_add_macro): Adjust.
	(module_state::{write,install}_macros): Likewise.
	(module_state::deferred_macro): Likewise.

	Module index no longer on the decl itself.
	gcc/cp/
	* cp-tree.h (DECL_MODULE_ORIGIN): Delete.
	(DECL_MODULE_IMPORT_P): New.
	(get_importing_module): Declare.
	* decl.c (duplicate_decls): Replace DECL_MODULE_ORIGIN with
	DECL_MODULE_IMPORT_P.
	* decl2.c (no_linkage_error): Likewise.
	* module.cc
	(will_be_import):Move later, use import_entity_{index,module}.
	(import_entity_index): Add null_ok parm.
	(dumper::impl::nested_name): Use import_entity_{index,module}.
	(trees_in::decl_value): Set DECL_MODULE_IMPORT_P.
	(trees_out::decl_node): Use will_be_import.
	(depset::hash::make_dependency): Check import_p flag.
	(depset::hash::add_specializations): Delete assert.
	(module_state::{read,write}_namespaces): Check DECL_MODULE_IMPORT_P.
	(module_state::write_specializations): Likewise.
	(get_originating_module): Use get_importing_module.
	(get_importing_module): New.
	(module_may_redeclare): Lookup the module index.
	(set_instantiating_module): Clear DECL_MODULE_IMPORT_P.
	(finish_module_processing): Leep the entity_map.
	* name-lookup.c (name_lookup::search_adl): Use
	get_importing_module.
	(add_imported_namespace): Set DECL_MODULE_IMPORT_P.
	* pt.c (build_template_decl): Copy DECL_MODULE_IMPORT_P, not
	ORIGIN.
	(tsubst_template_decl): Likewise.
	* ptree.c (cxx_print_decl): Use get_importing_module.

	gcc/cp/
	* name-lookup.h (add_imported_namespace): Origin is unsigned.
	* name-lookup.c (add_imported_namespace): Origin is unsigned and
	non-zero.  Elide unreachable code.

	gcc/cp/
	* cp-tree.h (get_instantiating_module_decl): Delete.
	(get_instantiating_module): Delete.
	* module.cc (depset::hash::add_specialization): Remove assert.
	(get_instantiating_module_decl): Delete.
	(get_instantiating_module): Delete.

	gcc/cp/
	* module.cc (trees_in::{enum ,get_}{dup,ord}ness): Delete.
	(trees_in::{odr,is}_duplicate): New.
	(trees_in::read_{function,var,class,enum}_def): Adjust.
	(module_state::read_cluster): Adjust.

	gcc/cp/
	* decl.c (duplicate_decls): Pass the old decl to
	module_may_redeclare.
	* module.cc (module_may_redeclare): Expect the decl, not its
	owner.

	gcc/cp/
	* module.cc (trees_out::decl_node): Move is_import test into
	non-streaming block.  Check the decl, not the instantiator.

2019-12-04  Nathan Sidwell  <nathan@acm.org>

	Elrond is dead, long live Elrond!

	gcc/cp/
	* module.cc (trees_out::decl_node): Refactor, removing duplicate
	code blocks.

	Delete unreachable code
	gcc/cp/
	* module.cc (enum tree_tag): Delete tt_named,
	tt_implicit_template.
	(trees_out::decl_node): Remove #if'd out code.
	(trees_in::tree_node): Remove tt_named, tt_implicit_template
	handling.
	(trees_out::key_mergeable): Remove unreachable anon-type case.
	(trees_out::{write,mark}_class_def)  Removed #if'd out code.
	(trees_in::read_class_def): Likewise.
	* name-lookup.c (get_binding_or_decl): Delete.
	(lookup_by_type, lookup_ident, get_lookup_ident): Delete.
	* name-lookup.h (lookup_by_type, lookup_ident, get_lookup_ident):
	Don't declare.

	Class members by index.
	gcc/cp/
	* decl.c (duplicate_decls): Repropagate module origin & purview.
	* friend.c (add_friend): Potential code, so I don't forget it.
	* module.cc (depset): Delete DB_MERGEABLE_BIT.
	(find_enum_member): New.
	(trees_out::decl_value): Separate different mergeable matching
	cases.  Add new ones.
	(trees_out::decl_node): Stream class members by index.  Adjust
	identifier streaming.
	(trees_in::decl_node): Deal with conv_op_identifier.  Use
	find_enum_member.
	(trees_out::get_merge_kind): Add DECL parm, deal with via_ctx and
	local_friends.
	(trees_out::key_mergeable): Swap parms, deal with new kinds.
	(trees_in::key_mergeable): Deal with new kinds.
	(trees_{in,out}::{read,write}_class_def): Don't stream member
	definitions.
	(trees_out::mark_class_def): Don't mark members.
	(depset::hash::make_dependency): Don't mark as mergeable.
	(cluster_cmp): Compare by stripped UID.
	(get_{instantiating,originating}_module_decl): Deal with fields,
	usings and local friends.
	* name-lookup.c (enum merge_match): New.
	(check_mergeable_decl): Add match kind parm.
	(match_mergeable_decl): Rename to ...
	(mergeable_namespace_entity): ... here.  Deal with namespace scope
	entities.
	(mergeable_class_member): New.
	(make_namespace_finish): Adjust.
	* name-lookup.h (match_mergeable_decl): Rename to ...
	(mergeable_namespace_entity): ... here.
	(mergeable_class_member): Declare.
	gcc/testsuite/
	* g++.dg/modules/friend-1_a.C: Adjust scans.
	* g++.dg/modules/indirect-[1234]_[bc].C: Likewise.
	* g++.dg/modules/inst-3_a.C: Likewise.
	* g++.dg/modules/tpl-friend-[12]_a.C: Likewise.
	* g++.dg/modules/tpl-spec-[45]_a.C: Likewise.
	* g++.dg/modules/vmort-2_a.C: Likewise.
	* g++.dg/modules/internal-1.C: Add xfailed dg-bogus
	* g++.dg/modules/thunk-1_a.C: Avoid implicit member problem.

2019-12-02  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (dumper::impl::nested_name): Add 'template '
	disambiguator.
	(trees_out::add_indirect_tpl_parms): Check if streaming before
	dumping.
	gcc/testsuite/
	* g++.dg/modules/indirect-[234]_[bc].C: Adjust scans.
	* g++.dg/modules/inst-3_b.C: Likewise.
	* g++.dg/modules/late-ret-[23]_[ac].[HC]: Likewise.
	* g++.dg/modules/tpl-friend-[12]_a.C: Likewise.
	* g++.dg/modules/tpl-spec-[1245]_[abcd].C: Likewise.

2019-11-27  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (will_be_import): New.
	(depset::hash::make_dependency): Add is_import parm, rather than
	calculate. Update all callers.
	(depset::hash::add_dependency): Likewise.

	gcc/cp/
	* module.cc (trees_out::decl_node): Untangle namespace-scope
	emission from class-scope.
	(trees_in::tree_node): Fix tt_entity ident signedness.
	(depset::hash::make_dependency): Check is_import before checking
	GMF reachability.

	gcc/cp/
	* module.cc (trees_out::decl_node): Refactor function scope
	& specialization emission.

	gcc/cp/
	* module.cc (trees_out::decl_node): Deal with function scope
	before instantiations.

2019-11-26  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::decl_node): Tag and add indirects for
	uninstantiated template friend.
	(trees_in::tree_node): Likewise.

	gcc/cp/
	* module.cc (trees_out::decl_node): Remove a scope.

	gcc/cp/
	* module.cc (depset): Delete EK_UNNAMED, EK_MAYBE_SPEC.
	(trees_out::decl_node): Use EK_DECL for those.
	(depset::hash::make_dependency): Likewise.
	gcc/testsuite/
	* g++.dg/modules/tpl-friend-[12]_a.C: Adjust scans.
	* g++.dg/modules/tpl-spec-5_a.C: Likewise.
	* g++.dg/modules/vmort-2_a.C: Likewise.

	gcc/cp/
	* module.cc (trees_out::decl_node): Assert more.

	gcc/cp/
	* module.cc (module_state::check_read): Simplify to print once per
	import.

	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Stream _EXPR operands in
	forward order.
	(trees_out::decl_node): Move NULL DECL_CONTEXT handling to ...
	(trees_out::tree_node): ... here.

2019-11-25  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (struct unnamed_entity): Delete.

	gcc/cp/
	* name-lookup.h (get_imported_namespace): Don't delare.
	* name-lookup.c (get_imported_namespace): Delete.

	Namespaces are in the entity_ary
	gcc/cp/
	* module.cc (trees_out::decl_node): Namespace may be imported.
	(depset::hash::make_dependency): Permit imported namespaces.
	(module_state::{read,write}_namespace): New.
	(module_state::{read,write}_namespaces): Adjust.
	(module_state::{read,write]_bindings): Adjust.
	(module_state::write): Don't count imported namespaces.
	* name-lookup.c (add_imported_namespace): Mark namespace as
	imported, if we made it.
	gcc/testsuite/
	* g++.dg/modules/indirect-[1234]_[bc].C: Adjust scans.
	* g++.dg/modules/namespace-2_a.C: Likewise.

	gcc/cp/
	* module.cc (tree_tag): Delete tt_namespace.
	(trees_in::tree_node): Delete tt_namespace handling.
	(module_state::{read,write}_namespaces): Adjust.
	(module_state::write_entities): Delete TABLE parm.

	gcc/cp/
	* module.cc (trees_out::tree_decl): Write namespaces as tt_entity.
	(module_state::write_namespaces): Adjust.
	(module_state::read_namespaces): Likewise, don't return a
	namespace vector.
	(module_state::{read,write}_bindings): Adjust.
	(module_state::{read,write}_entities): Allow namespaces.
	(module_state::{read,write}): Adjust.
	gcc/testsuite/
	* g++.dg/modules/indirect-[1234]_c.C: Adjust scans.

	gcc/cp/
	* module.cc (module_state::write_namespaces): Delete TABLE arg,
	look at the dep[0]
	(module_state::read_namespaces): Add num_spaces parm.  Use it to
	count iterations.
	(module_State::write_bindings): Drop TABLE arg, look at dep[0].
	(struct module_state_config): Add num_namespaces field, stream it.
	(module_state::{read,write}): Don't count global namespace. adjust
	namespace streaming calls.

	gcc/cp/
	* module.cc (trees_out::decl_node): Add namespace dependency here.
	(depset::hash::add_dependency): And here.
	(space_cmp): Delete.
	(module_state::write): No need to sort namespaces anymore.

	gcc/cp/
	* module.cc (depset::hash::make_dependency): Add context
	dependency when discovering a new GMF binding.
	(depset::hash::add_binding): Likewise when discoving a non-empty binding.
	(depset::hash::finalize_dependencies): Leave binding's namespace
	dependency untouched.
	(module_state::write_cluster): Assert binding's namespace in in
	slot zero.  Adjust binding scan.

2019-11-23  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cxx-mapper.cc (DOT_REPLACE, COLON_REPLACE): New.
	(module2bmi): Use them.
	gcc/testsuite/
	* g++.dg/modues/modules.exp (dg-module-cmi): Update default mapping.

2019-11-22  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (depset::EK_FOR_BINDING): New.
	(depset::hash::make_dependency): Don't look at current.  Adjust.
	(depset::hash::add_dependency): Current is always live.
	(depset::hash::add_binding): Don't set current.  Directly depend
	the binding.
	(depset::hash::add_namespace_entities): Use make_dependency.
	(depset::hash::add_specializations): Likewise.

	gcc/cp/
	* module.cc (depset::hash::find_entity): Rename to ...
	(depset::hash::find_dependency): ... here.  Update callers.
	(depset::hash::add_dependency): Break apart to ...
	(depset::hash::make_dependency): ... this, and ...
	(depset::hash::add_dependency): ... this, adder.
	(depset::hash::add_dependency): Do both.

	gcc/cp/
	* module.cc (depset::DB_PSEUDO_SPEC_BIT): Delete.
	(depset::is_pseudo_spec): Delete.
	(depset::add_dependency): Don't set it.

	gcc/cp/
	* module.cc (trees_out::decl_node): We should not meet imported
	internal namespaces.
	(module_state::{read,write}): Stream entities before namespaces.
	* name-lookup.c (add_imported_namespace): Module number must not
	be negative.

	gcc/cp/
	* module.cc (trees_in::lang_decl_bools): Don't set module_origin
	here.
	(trees_out::decl_value): Stream out entity index.  Install into
	entity_map.
	(trees_in::decl_value): Stream in entity index.  Install into
	entity ary, and map (if new)
	(module_state::write_cluster): Do not install into map here.
	(module_state::read_cluster): ... or here. And not ary either.
	gcc/testsuite/
	* g++.dg/modules/builtin-[13]_b.C: Adjust scans.
	* g++.dg/modules/indirect-[123]_[bc].C: Likewise.
	* g++.dg/modules/inst-[1234]_b.C: Likewise.
	* g++.dg/modules/late-ret-[23]_c.C: Likewise.
	* g++.dg/modules/part-3_[cd].C: Likewise.
	* g++.dg/modules/tdef-6_b.C: Likewise.

	gcc/cp/
	* cp-tree.h (DECL_MODULE_IMPORT_P): #ifdef out, not yet ready
	* module.cc (dumper::impl::nested_name): Don't use it.
	(module_state::read_cluster): Likewise.

	gcc/cp/
	* module.cc (trees_out::decl_value): Ensure we stay in the
	section.
	(trees_out::mark_class_def): Do not mark non-friends on
	CLASSTYPE_DECL_LIST.

2019-11-21  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.c (lookup_enum_member): Delete.
	(get_binding_or_decl): Add missing return.

	gcc/cp/
	* name-lookup.c (get_binding_or_decl): Only class contexts.
	* module.cc (trees_out::decl_node): Possible fixme.

	gcc/cp/
	* module.cc (depset::hash): Add sections member.
	(module_state::write_cluster): Use it.
	(module_state::write): Set it.

	gcc/cp/
	* module.cc (trees_out::decl_node): Don't strip_template checking
	instantiation consistency.
	(depset::hash::add_{dependency,specializations}): Likewise.
	(get_originating_module_decl): Cope with template friends.  Get to
	the template_decl.
	(get_instantiating_module_decl): Cope with template friends.  Keep
	the template_decl.
	gcc/testsuite/
	* g++.dg/modules/pl-spec-[1245]_[abcd].C: Adjust scans.

	gcc/cp/
	* name-lookup.c (check_local_shadow): Bail out for clones.

	gcc/cp/
	* module.cc (dumper::impl:nested_name): Obnly show module on imports.
	gcc/testsuite/
	* g++dg/modules: Anjust many scans.

2019-11-20  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (tree_tag): Rename tt_enum_int, add tt_enum_decl.
	(trees_out::tree_decl): Write enum consts as tt_enum_decl, not
	tt_data_member.
	(trees_in::tree_node): Add tt_enum_decl handling, adjust
	tt_data_member handling.

	gcc/cp/
	* module.cc (module_state::lazy_load): Add diags arg, make index
	unsigned.
	(lazy_load_specializations): Use lazy_load.

	gcc/cp/
	* module.cc (module_state:write_cluster): Minor cleanups
	gcc/testsuite/
	* g++.dg/modules/indirect-2_b.C: Adjust scans.
	* g++.dg/modules/inst-3_a.C: Likewise.
	* g++.dg/modules/stdio-1_a.H: Likewise.

	gcc/cp/
	* module.cc (depset:entity_kind): Reorder.
	(depset::DB_REFS_UNNAMED_BIT): Delete. Remove accessor & setter.
	(cluster_cmp): Order by entity_kind.
	(module_state::write_cluster): A single write pass is sufficient.
	gcc/testsuite/
	* g++.dg/modules/indirect-3_b.C: Adjust cluster order scan.
	* g++.dg/modules/late-ret-[23]_a.H: Likewise.

	gcc/cp/
	* (class depset): Drop entity_num field.  Adjust all users to use
	cluster.
	(module_state::write_cluster): Merge counting and marking loops.

	Expelliarmus!
	gcc/cp/
	* module.cc (module_state): Delete unnamed_{lwm,num}.
	(enum ct_decl_flags): Delete cdf_is_voldemort.
	(module_state::write_cluster): Don't set cluster number.  Drop
	voldemort handling.
	(module_state::read_cluster): Drop voldemort handling.
	(module_state::write_specializations): Drop cluster consistency
	check.
	gcc/testsuite/
	* g++.dg/modules/indirect-2_b.C: Adjust scans.
	* g++.dg/modules/inst-[23]_a.C: Likewise.

	Remove more unnamed remnants.
	gcc/cp/
	* module.cc (module_state::write_cluster): Count specializations.
	(module_state::{read,write}_unnamed): Rename to ...
	(module_state::{read,write}_specializations): ... here. Drop
	section numbers.  Adjust calls.
	(struct module_state_config): Rename num_unnamed to
	num_specializations, adjust all uses.
	gcc/testsuite/
	* g++.dg/modules/tpl-spec-[12345]_[ab].C: Adjust scans.

	Remove unnamed ary etc.
	gcc/cp/
	* module.cc (unnamed_ary, unnamed_map_t, unnamed_map): Delete.
	(module_state::read_cluster): Do not insert into unnamed_ary or
	map.
	(module_state::read_unnamed): Do not extend unnamed_ary.
	(module_state::read): Do not set unnamed_lwm.
	(module_for_unnamed): Delete.
	({init,finish}_module_processing): Do not create/destroy unnamed
	ary & map.
	gcc/testsuite/
	* g++.dg/modules/indirect-[23]_c.C: Adjust scans.
	* g++.dg/modules/inst-[124]_b.C: Likewise.
	* g++.dg/modules/late-ret-2_c.C: Likewise.

	gcc/cp/
	* module.cc (module_state::{read,write}_unnamed): Specializations
	store entity index.
	(lazy_load_specializations): Use the entity index.

	No more horcruxes.
	gcc/cp/
	* module.cc (trees_out::decl_node): Specializations are tt_entity.
	(enum cluster_tag): Delete ct_horcrux.
	(module_state::write_cluster): No need to create horcruxes.
	(module_state::read_cluster): No need to resurrect horcruxes.
	gcc/testsuite/
	* g++.dg/modules/indirect-[24]_b.C: Adjust scans.
	* g++.dg/modules/inst-[123]_[ab].C: Likewise.
	* g++.dg/modules/late-ret-2_c.C: Likewise.
	* g++.dg/modules/tpl-friend-5_b.C: Likewise.

2019-11-19  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::decl_node): Process unnamed decls directly
	here.
	(depset::hash::add_dependency): EK_UNNAMED doesn't reference
	unnamed (really).
	(module_state::write_cluster): Do not preseed horcruxes for
	EK_UNNAMED.  Add unnamed and specializations into the entity_map.
	gcc/testsuite/
	* g++.dg/modules/vmort-2_[abc].C: Adjust scans

	gcc/cp/
	* module.cc (enum tree_tag): Kill tt_anon.  No longer emitted.
	(import_entity_index): Do not assert imported.
	(trees_out::decl_node): Always get the import_entity_index for
	tt_entity.
	(trees_in::tree_node): Drop tt_anon.
	(module_state::write_cluster): Add the EK_DECLs to the entity_map.

	gcc/cp/
	* cp-tree.h (lazy_load_binding): Drop final parm.
	* module.cc (module_state::lazy_load): Drop ns, id & outermost
	parms.
	(trees_in::tree_node, module_state::read_cluster): Adjust
	lazy_load calls.
	(module_state::read): Inhibit GC here.
	(lazy_load_binding): Deal with binding dumps here.
	(lazy_load_specializations): Use lazy_load_binding.
	* name-lookup.c: Adjust lazy_load_binding calls.
	(get_binding_or_decl): No namespace handling here.
	gcc/testsuite/
	* g++.dg/modules/tpl-friend-5_b.C: Adjust scans
	* g++.dg/modules/vmort-2_c.C: Likewise.

	Entities are numbered (part 1)
	gcc/cp/
	* cp-tree.h (DECL_MODULE_IMPORT_P): New.
	* module.cc (depset::entity_kind): Add EK_ENTITIES.
	(depset::entity_num): New (temporary) field.
	(enum tree_tag): Add tt_entity.
	(module_state): Add entity_lwm & entity_num fields.
	(module_state::lazy_load): Add index, use it.
	(module_state::{read,write}_entities): New.
	(module_state::{read,write}_cluster): Number the entities.
	(entity_map_t, entity_map, entity_ary) New.
	(import_entity_index, import_entity_module): New.
	(trees_out::decl_node): Write tt_entity for namespace decls.
	(trees_in::tree_node): Add tt_entity handling.
	(struct module_state_config): Add num_entities field.
	(module_state::{read,write}_config): Stream it.
	(module_state::{read,write}: Adjust.
	({init,fini}_module_processing): Deal with entity map and ary.
	* name-lookup.c (get_binding_or_decl): Mark NAMESPACE unreachable.
	gcc/testsuite/
	* g++.dg/modules/{builtin,indirect}-1_b.C: Adjust scans.
	* g++.dg/modules/indirect-[1234]_c.C: Likewise.
	* g++.dg/modules/tpl-friend-5_b.C: Likewise.
	* g++.dg/modules/unnamed-1_b.C: Likewise.

2019-11-14  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (check_mergeable_specialization): Take spec_entry arg.
	* module.cc (trees_out::decl_node): Allow CONCEPT_DECL.
	(trees_out::key_mergeable): Use check_mergeable_specialization).
	(specialization_add): Adjust check_mergeable_specialization call.
	* pt.c (register_specialization): Remove casts.
	(check_mergeable_specialization): Take spec_entry arg.
	(match_mergeable_specialization): Add the specialization early.
	gcc/testsuite/
	* g++.dg/modules/concept-4.H: New.

	gcc/cp/
	* cp-tree.h (lang_decl_base): Note 8-bits.
	* error.c (dump_module_suffix): Bail on no DECL_CONTEXT.
	* module.cc (trees_{in,out}::lang_decl_bools): Update for new
	fields.
	(has_definition): Deal with CONCEPT_DECL.
	(trees_out::{mark,write}_definition): Concepts are like vars.
	(trees_in::read_definition): Likewise.
	({get,set}_originating_module{,_decl}): Deal with CONCEPT_DECL.
	* pt.c (finish_concept_definition): Set orginating module.
	gcc/testsuite/
	* g++.dg/modules/concept-3_[ab].C: New.

	Merge trunk r278228.

2019-11-01  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* rtti.c ({push,pop}_abi_namespace): Save and restore module
	state.
	(build_dynamic_cast_1, tinfo_base_init): Adjust.

	gcc/cp/
	* module.cc (depset::hash::find_dependencies): Reach unreached
	specializations.

2019-10-31  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (module_state::read_cluster): Hack around cfun.

2019-10-29  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out): Clean up dead code, update instrumentation.
	(class_members): New global.
	(depset::hash::add_writables): Rename to ...
	(depset::hash::add_namespace_entities): ... this.
	(depset::hash::add_class_entities): New, incomplete.
	(module_state::write): Add class entities.
	(set_instantiating_module): Record on the class_member list if
	necessary.

	gcc/cp/
	* module.cc (trees_out::core_vals): Audit VAR_DECL, removing fixme.

2019-10-28  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Stream more block fields.

	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Stream template info's
	typedefs needing access checks.

	gcc/cp/
	* module.cc (depset): Correct documentation.
	(walk_kind_name): Delete unused.
	(trees_out::get_container): Lookup for redirect.

	gcc/cp/
	* module.cc (node_template_info): Type cannot be NULL.

	gcc/cp/
	* module.cc (trees_out::{fn_parms_ini,tpl_header}): Privatize,
	resolving fixme.
	(trees_out::core_vals): Resolve TEMPLATE_DECL &
	TEMPLATE_PARM_INDEX fixmes.
	(trees_out::tpl_parm_value): Resolve template template parm fixme.

	Merge trunk r277514.

2019-10-25  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::type_node): Move typedef printing after
	variant printing.
	(trees_in::tree_node): Simplity tt_typedef_type.

	gcc/cp/
	* module.cc (trees_out::core_vals): Check if template parm has a
	canonical type before processing it.
	(trees_in::tpl_parm_value): Likewise.

	gcc/cp/
	* module.cc (enum tree_tag): Delete tt_typename_decl.
	(trees_out::decl_node): Do not handle TYPENAME_TYPE here ...
	(trees_out::type_node): ... handle them here instead.
	(trees_in::tree_node): Delete tt_typename_decl, handle
	TYPENAME_TYPE as a derived_type.

	gcc/cp/
	* module.cc (trees_out::decl_node): Fixup anonymous case.

	Remove mergeable sorting code.
	gcc/cp/
	* module.cc (depset::hash): Delete for_mergeable,
	is_for_mergeable.
	(depset::hash::add_mergeable{,_horcrux}): Delete.
	(trees_out::get_merge_kind): Remove for_mergeable indirection.
	(trees_out::key_mergeable): Likewise.
	(depset::hash::add_dependency): Remove mergeable handling.
	(depset::hash::find_dependencies): Likewise.  Remove #if'd out code.
	(sort_mergeables): Delete.
	(module_state::write_cluster): Remove #if'd out code.

2019-10-24  Nathan Sidwell  <nathan@acm.org>

	Turn off mergeable ordering.
	gcc/cp/
	* module.cc (depset::hash::find_dependencies): No need to add
	specialization keys here.
	(module_state::erite_cluster): Or sort mergeables here.
	gcc/testsuite/
	* g++.dg/modules/indirect-[234]_b.C: Adjust scans.
	* g++.dg/modules/inst-[23]_a.C: Likewise.
	* g++.dg/modules/late-ret-[23_a.H: Likewise.
	* g++.dg/modules/tpl-friend-1_a.C: Likewise.

	Types always keyed by TYPE_NAME.  Use TYPE_NAME not TYPE_STUB_DECL.
	gcc/cp/
	* module.cc (enum merge_kind): Drop MK_linkage.
	(trees_out::core_vals): Fix DECL_TEMPLATE_PARM_P thinko.
	TYPE_DECLS for linkage are not regular typedefs.
	(trees_{in,out}::add_indirects): Always add a TYPE_DECL's type.
	(trees_{in,out}::decl_value): Write the stub_decl if it's
	different.
	(trees_out::{type,decl}_node): Cleanup some type_decl handling.
	(trees_out::get_merge_kind): Drop MK_linkage.
	(trees_{in,out}::key_mergeable): Likewise.
	(trees_out::{has,write,mark}_definition): Adjust.
	(trees_in::read_definition): Likewise.
	gcc/testsuite/
	* g++.dg/modules/class-3_[bd].C: Adjust scans.
	* g++.dg/modules/tdef-6_b..C: Adjust scans.

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parm_value): No need to stream
	bound ttp's TI here.
	(trees_out::get_merge_kind): Refactor anon type determination.

	Merge trunk r277416.

2019-10-23  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (enum ct_decl_flags): Add cdf_is_defn.
	(module_state::{read,write}_cluster): Don't stream definitions
	separately.

	gcc/cp/
	* module.cc (get_clone_target): Assert more.
	(trees_in::back_ref): Check the tree's not insane.
	(trees_in::tree_node): Check the clone target is ok.
	(module_state::lazy_load): Inhibit GC.

	gcc/
	* dumpfile.c (dump_begin): Move decls for RAII.

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parm_value): Don't stream tpi
	here.
	(trees_{in,out}::tree_value): Strip now-unreachable code.

	gcc/cp/
	* module.cc (enum tree_tag): Add tt_tpl_parm.
	(trees_{in,out}::tpl_parm_value): New.
	(trees_out::add_indirect_tpl_parms): Simpilfy.
	(trees_out::tree_value): No template parms here.
	(trees_{in,out}::tree_node): Deal with call tpl_parm_value.

	gcc/cp/
	* pt.c (reduce_template_parm_level): Attach TPI to the type or
	decl.
	(convert_generic_types_to_packs): Pass new type to
	reduce_template_parm_level.

2019-10-22  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parms{,_fini}): Drop outer parms,
	add tpl_levels.
	(trees_{in,out}::tpl_header): Likewise.
	(trees_{in,out}::add_indirect_tpl_parms): New.
	(trees_{in,out}::add_indirects): Call them.
	(trees_{in,out}:decl_value): Adjust tpl_header streaming.
	(trees_{in,out}:tree_value): Adjust tpl_header streaming.
	(depset::hadh::find_dependencies): Likewise.
	(module_name): Don't look for current TU's parent.

2019-10-21  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_in::back_ref): New, broken out of ...
	(trees_in::tree_node): ... here.  Call it multiple times.

	gcc/cp/
	* module.cc (trees_{in,out}::add_indirects): New, broken out of ...
	(trees_out::decl_node, trees_in::tree_node): ... here.  Call them.
	(module_state::{read,write}_cluster): Call them instead of
	duplicate code.
	gcc/testsuite/
	* g++.dg/modules/by-name-1.C: Adjust scans.
	* g++.dg/modules/class-3_[bd].C: Likewise.
	* g++.dg/modules/vmort-2_c.C: Likewise.

	gcc/cp/
	* module.cc (trees_{in,out}::key_mergeable): Do not stream tpl
	header of fn parms here.
	(tree_{in,out}::decl_value): Stream them here ...
	(depset:hash::find_dependencies): ... and here.

2019-10-18  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r277167.

	gcc/cp/
	* module.cc (trees_out::decl_value): Excise template_parm
	handling.
	(trees_{in,out}::tree_value): Excise non-template-parm
	tmpl/type/fn/var handling here.

	gcc/cp/
	* module.cc (dumper::impl::nested_name): Check template_parm_p
	directly.
	(trees_out::core_vals): Check DECL_TEMPLATE_PARM_P.
	(trees_out::decl_value): Never get a DECL_TEMPLATE_PARM_P.
	(trees_in::decl_value): Likewise.
	(trees_out::decl_node): Send DECL_TEMPLATE_PARM_P to tree_value.
	(trees_out::type_node): Simplify name detection.
	(trees_out::tree_value): Allow DECL_TEMPLATE_PARM_P, but no other
	tmpls/type/var/fns.
	* tree.c (bind_template_template_parm): Set DECL_TEMPLATE_PARM_P.1

	gcc/cp/
	* module.cc (dumper::impl::nested_name): Detect template parms.
	(trees_{in,out}::core_vals): Don't write context of template
	parms.  Don't clobber template's type.

	gcc/cp/
	* module.cc (trees_{in,out}::start): Stream code if permitted.
	Adjust callers.

2019-10-17  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::tpl_parms): Assert a lot.
	(depset::hash::find_dependencies, module_state::write_cluster):
	Mark mergeable sort-specific points.

	gcc/cp/
	* module.cc (trees_out::decl_value): Stream thunks too.
	(trees_out::decl_node): Forward all potentially mergeable decls to
	decl_value.
	(trees_out::tree_value): Make sure we don't get any potentially
	mergeable decls.
	(trees_{in,out}::tree_value): Stream template parms
	via tpl_parms.
	(trees_{in,out}::tpl_parms): The vector can be 0 length.
	(trees_out::mark_declaration): Don't mark the template parms.

	gcc/cp/
	* module.cc (trees_{in,out}::tpl_parms): Cope with non-shared
	parms.
	(trees_{in,out}::tpl_parms_fini): Likewise, stream vec type.

	gcc/cp/
	* cp-objcp-common.c (cp_pushdecl): Set DECL_CONTEXT.
	gcc/testsuite/
	* g++.dg/modules/builtin-3_[ab].C: New.

	gcc/cp/
	* module.cc (trees_{in,out}::decl_value): Refactor some ifs.

2019-10-16  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* decl.c (cp_make_fname_decl): Set context to global namespace,
	outside functions.
	(builtin_function_1): Merge into ...
	(cxx_builtin_function): ... here.  Nadger the decl before maybe
	copying it.  Set the context.
	(cxx_builtin_function_ext_scope): Push to top level, then call
	cxx_builtin_function.

	gcc/cp/
	* rtti.c (get_tinfo_desc): Set DECL_CONTEXT.
	gcc/testsuite/
	* g++.dg/modules/tinfo-1.C: New.

	gcc/cp/
	* module.cc (enum tree_tag): Add tt_parm.
	(trees_out::decl_node): Emit tt_parm for parms.
	(trees_in::tree_node): Add tt_parm.
	(trees_out::write_function_def): Simply tag constexpr parms &
	result.
	(trees_in::read_function_def): Clone the originating fn's parms &
	result.
	(module_state::read): Add GC points, when lazy.

2019-10-15  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::core_vals): Don't assert template
	arguments visited.
	(trees_{in,out}::tpl_parms): Stream TMPL_DEPTH.
	(trees_{in,out}::tpl_parms_fini): New.
	(trees_{in,out}::decl_value): Don't stream template parms, use
	tpl_parms_fini.

	gcc/cp/
	* module.cc (trees_out::get_container): New, broken out of ...
	(trees_out::key_mergeable): ... here.  Add container parm.
	(trees_in::key_mergeable): Container is already set.
	(trees_{in,out}::decl_value): Stream container here.
	(dpset::hash::find_dependencies): Adjust mergeable walk.
	gcc/testsuite/
	* g++.dg/modules/builtin-1_a.C: Adjust scan.

	Merge trunk r277002.

	Revert TYPE_LAMBDA_P, it's unnecessary churn.
	gcc/cp/
	* cp-tree.h (LAMBDA_TYPE_P): Subsume TYPE_LAMBDA_P.
	(TYPE_LAMBDA_P): Delete.  Update all uses.

	gcc/cp/
	* module.cc (merge_kind): Add MK_local_friend.
	(trees_{in,out}::tpl_parms): New.
	(trees_{in,out}::tpl_header): Adjust parm streaming
	(trees_{in,out}::key_mergeable): Find containing template.

2019-10-11  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r276888.
	Pull in c++20 concepts.

	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Don't stream function
	parms here.
	(trees_out::decl_value): Stream has_defn.
	(trees_in::decl_value): Stream has_defn, adjust fn_parms_fini.
	(trees_in::tree_value): Likewise.
	(trees_{in,out}::fn_parms_init): Stream entire parms.
	(trees::fn_parms_fini): Do nothing.
	(trees_in::fn_parms_fini): Add has_defn, adjust.

	gcc/cp/
	* module.cc (enum walk_kind): Remove WK_merge.
	(enum trees_out::tags): Remove tag_merging.
	(trees_out::mark_merged): Delete.
	(trees_out::{insert,ref_node}): Adjust.
	(trees_out::decl_value): Insert by value immediately.

	gcc/cp/
	* optimize.c (maybe_clone_body): Allow aliasing with modules.

	gcc/cp/
	* module.cc (enum depset::entity_kind): Remove EK_CLONE.
	(depset::add_clone): Delete.
	(enum merge_kind): Remove MK_clone.
	(depset::entity_kind_name): Adjust.
	(trees_in::decl_value): No merging for clones.
	(trees_out::decl_node): Remove clone dependency.
	(trees_out::get_merge_kind): No clone merging.
	(trees_{in,out}::key_mergeable): Likewise.
	(module_state::write_cluster): Never see a clone.

	Reconstruct clones on stream in
	gcc/cp/
	* module.cc (trees_out::{decl,tree}_value): Write clone info.
	(trees_in::{decl,tree}_value): Reconstruct clone.
	(trees_out::decl_node): Do not depend on clones.
	(module_state::read_cluster): Clone bodies.

2019-10-10  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (DECL_NEEDS_VTT_PARM_P): Delete.
	(build_clones): Declare.
	(ctor_omit_inherited_parms): Add exact_name default parm.
	* class.c (build_clone): Add need_vtt & omit_inherited parms, do
	not calculate here.
	(build_clones): New function.  Add need_vtt &
	omit_inherited_parms.  Broken out of ...
	(clone_function_decl): Call build_clones.  Add to method vec here.
	* method.c (ctor_omit_inherited_parms): Add exact_name parm.
	Detect any ctor or specific base ctor as specified.

2019-10-09  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* class.c (maybe_add_class_template_decl_list): Don't check
	template-id-expr friends.
	* module.cc (friend_from_decl_list): Don't stray into primary
	templates.
	(trees_out::{write,mark}_class_def): Adjust local friend
	detection.
	(trees_in::read_class_def): Likewise.

	gcc/cp/
	* cp-tree.h (DECL_UNINSTANTIATED_TEMPLATE_FRIEND_P): New.
	* module.cc (trees_{in,out}::core_vals): Stream local template
	friend's DECL_CHAIN.
	(trees_out::decl_node): Use DECL_UNINSTANITATED_TEMPLATE_FRIEND_P.
	(trees_out::{read,write,mark}_class_def): Adjust local template
	friend streaming.
	* pt.c (push_template_decl_real): Set
	DECL_UNINSTANTIATED_TEMPLATE_FRIEND_P.
	(tsubst_friend_function): Clear D_U_T_F_P.

	gcc/cp/
	* pt.c (push_template_decl_real): Always set DECL_CHAIN for
	non-pushed friends.

2019-10-08  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::decl_value): Check streaming before dump.
	(module_name): Protect from not modules.

	gcc/cp/
	* module.cc (enum merge_kind): Rename non->unique.
	(trees_out::key_mergeable): Add decl parm.  Return MK_unique for
	non-dep decls.
	(trees_{out,out}::decl_value): Adjust.

	gcc/cp/
	* module.cc (struct nodel_decl_hash): New.
	(duplicate_hash_map): New.
	(trees_in::duplicates): New.
	(trees_in::mergeables): Delete.
	(trees_in::{,~}trees_in): Adjust.
	(trees_in::{find,register,unmatched}_duplicate): New.
	(trees_in::{reserve,register,unmcted}_mergeable): Delete.
	(enum trees_in::dupness): Delete DUP_unique.
	(trees_in::decl_value): Adjust duplicate registration.
	(trees_in::get_dupness): Adjust.
	(module_state::{read,write}_cluster): Don't stream mergeable count.

	gcc/cp/
	* module.cc (enum walk_kind): Rename body->value,
	mergeable->merge.  Delete clone, merging.
	(trees_in::decl_value): Drop walk_kind parm, read merge kind
	early.
	(trees_in::key_mergeable): Add merge_kind parm, return bool.
	(trees_out::mark_node): Rename to ...
	(trees_out::mark_by_value): ... here.
	(trees_out::get_merge_kind): New, broken out of ...
	(trees_out::key_mergeable): ... here.  Add merge_kind parm.
	(trees_out::decl_value): Replace walk_kind parm with depset.
	Adjust.
	gcc/testsuite/
	* g++.dg/modules/scc-1.C: Adjust scan.
	* g++.dg/modules/builtin-1_a.C: Adjust scan.

2019-10-07  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (enum trees_out::tags): Delete tag_mergeable,
	tag_cloned.
	(trees_out::mark_mergeable): Delete.
	(trees_out::{insert,ref_node}): Adjust.
	(trees_out::decl_node): Look at depset to determine mergeability.
	(trees_out::key_mergeable): Adjust.
	(trees_in::register_mergeable): Always reserve space.
	(module_state::write_cluster): Don't mark mergeable here.

	gcc/cp/
	* module.cc (trees_in::get_odrness): Check if overrun.
	(trees_in::read_class_def): Add overrun protection.
	* name-lookup.c (name_search::search_adl): Tweak.

	gcc/cp/
	* module.cc (trees_{in,out}::core_vals): Stream
	decl_non_common.result for using decls.
	(trees_out::decl_node): USING_DECLS are done by value.
	* name-lookup.c (finish_nonmember_using_decl): Set DECL_CONTEXT.
	gcc/testsuite/
	* g++.dg/modules/using-6_[ab].C: New.

	gcc/cp/
	* module.cc (enum tree_tag): Add tt_decl.
	(trees_{in,out}::decl_value): Broken out of ...
	(trees_{in,out}::tree_value): ... here.  Deal with non mergeble
	cases only.
	(trees_in::tree_node): Add tt_decl.
	(trees_out::decl_node): Call decl_value.

	gcc/cp/
	* module.cc (trees_out::decl_node): Refactor some instantiation
	discovery.

2019-10-04  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r276597.

	gcc/cp/
	* module.c (trees_out:decl_node): More switchification and code
	movement.

	gcc/cp/
	* module.c (trees_out:decl_node): Switchify, and move some checks
	before template detection.

	gcc/cp/
	* module.cc (trees_in::tree_value): Rework merge_kind switching.
	(trees_{in,out}::key_mergeable): Likewise.

	gcc/cp/
	* module.cc (enum merge_kind): Reorder.

2019-10-03  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::decl_node): Merge and reorder tinfo
	streaming.
	(trees_in::tree_node): Merge tinfo streaming.

	gcc/cp/
	* module.cc (depset::hash::add_dependency): Separate EK_REDIRECT
	handling from EK_MAYBE_SPEC.
	(get_instantiating_module_decl): Reorder checks, remove fixme.

	gcc/cp/
	* module.cc (trees_out::decl_node): Check DECL_LANG_SPECIFIC.
	(depset::hash::add_dependency): Likewise.
	(get_originating_module_decl): Return global_namespace for null.
	(get_originating_module): Correctly handle lack of
	DECL_LANG_SPECIFIC.
	(set_instantiating_module): Lazily allocate lang specific.
	(set_originating_module): Call set_instantiating_module.
	* pt.c (build_template_decl, tsubst_template_decl): Check
	DECL_LANG_SPECIFIC.
	* rtti.c (tinfo_base_init): Likewise.

	gcc/cp/
	* module.cc (elf_in::{defrost,begin}): Advise random seeking.

	gcc/cp/
	* module.cc (depset::hash::add_dependency): Drop is_import arg,
	update callers.  Calculate it here.

	gcc/cp/
	* cp-tree.h (MODULE_SLOT_*): Move to ...
	* name-lookup.c (MODULE_SLOT_*): ... here.
	* module.cc (depset::hash::add_dependency): More asserts.
	* pt.c (build_template_decl, tsubst_template_decl): Always
	propagate from result.

2019-10-02  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_out::tree_ctx): Delete, forward all callers to
	tree_node.
	(trees_out::tree_namespace): Delete, move into tree_decl.
	(trees_out::tree_decl): Rename to ...
	(trees_out::decl_node): ... this.  Update caller.

	gcc/cp/
	* module.cc (trees_out::tree_type): Rename to ...
	(trees_out::type_node): Drop walk_kind arg, return void.  Update
	callers.

	gcc/cp/
	* module.cc (trees_out::tree_ctx): Drop need_contents parm.
	Update callers.
	(trees_out::tree_{type,decl}: Likewise.

	gcc/cp/
	* module.cc (trees_out::tree_ctx): Drop inner_decl parm.  Update
	callers.
	(trees_out::tree_namespace): Likewise.

	gcc/cp/
	* cp-tree.h (MK_*): Document better.

	gcc/cp/
	* cp-tree.h (MODULE_CURRENT, MODULE_IMPORT_BASE): Delete.
	* module.cc: Replace with zero/one
	* name-lookup.c: Likewise.
	* decl2.c (no_linkage_error): Likewise.
	* ptree.c (cxx_print_decl): Likewise.

	Don't equivocate GMF with module
	gcc/cp/
	* cp-tree.h (MODULE_NONE, MODULE_PURVIEW): Delete.
	(MODULE_CURRENT): New.
	(MODULE_IMPORT_BASE): Reduce.
	(DECL_MODULE_OWNER): Rename to ...
	(DECL_MODULE_ORIGIN): ... this.
	(DECL_MODULE_PURVIEW_P): New.
	(MODULE_BITS): Reduce.
	(lang_decl_base::module_purview_p): New bit.
	(module_may_redeclare): Take decl.
	* module.cc (MODULE_UNKNOWN_PARTITION): New.
	(MODULE_LIMIT): Adjust.
	(slurping::remap_module): Return int.
	(trees_in::assert_definition): Adjust.
	(dumper::impl::nested_name): Adjust.
	(trees_{in,out}::lang_decl_bits): Stream module_purview_p.
	(trees_out::tree_{namespace,decl,value}): Adjust.
	(trees_in::tree_node): Adjust.
	(depset::hash::add_{dependency,binding,specializations}): Adjust.
	(module_state::check_not_purview): Adjust.
	(module_state::read_{imports,partitions}): Adjust.
	(module_state::write_{cluster,namespaces,unnamed}): Adjust.
	(module_state::read_unnamed): Adjust.
	(module_state::{write,read}): Adjust.
	(module_visible_instantiation_path): Adjust.
	(get_originating_module): Return int.
	(get_instantiating_module): Adjust.
	(module_may_redeclare): Reimplement.
	(set_{instantating,originating}_module): Adjust.
	(module_state::{do,direct}_import): Adjust.
	(declare_module, module_preprocess, process_deferred_imports): Adjust.
	({init,finish}_module_processing): Adjust.
	* name-lookup.c (get_fixed_binding_slot): Adjust.
	(name_lookup::{search_namespace_only,adl_namespace_fns,search_adl):
	Adjust.
	(check_module_override, extract_module_binding): Adjust.
	(note_pending_specializations): Adjust.
	(get_imported_namespaxe, finish_nonmember_using_decl)
	(lookup_type_scope_1): Adjust.
	(add_imported_namespace): Take int.
	* name-lookup.h ({add,get}_imported_namespace): Module is int.
	* class.c (build_self_ref): Set instantiating module.
	* decl.c (duplicate_decls): Adjust.
	* decl2.c (no_linkage_error): Adjust.
	* mangle.c (maybe_write_module): Adjust.
	* pt.c (build_template_decl): Propagate purview flag.
	(tsubst_template_decl): Likewise.
	(tsubst_decl): Set instantiating_module as necessary.
	* ptree.c (cxx_print_decl): Adjust, print purview flag.
	* rtti.c (tinfo_base_init): Clear purview flag.
	gcc/testsuite/
	* g++.dg/modules/*: Update lang dump scans.

2019-10-01  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (set_originating_module): Add friend_p.
	* decl.c (grokdeclarator): Set it.
	* module.cc (get_originating_module): Always look through template
	info.
	(set_originating_module): Add friend_p.  Assert.
	(set_instantiating_module): Assert.

2019-09-30  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (set_module_owner): Delete.
	* decl.c (duplicate_decls): Propagate module owner.  Set module
	export for builtins, no need to set owner.
	* module.cc (set_module_owner): Delete.
	gcc/testsuite/
	* g++.dg/modules/isalnum.H: New.

2019-09-27  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r276201.

	gcc/cp/
	* decl.c (fixup_anonymous_aggr): Partially revert recent change.
	(grokfndecl): Call set_originating_module before determining
	specialization.
	(grokdeclarator): Likewise.

	gcc/cp/
	* cp-tree.h (set_{originating,instantiating}_module): Declare.
	* class.c (layout_class_type): Use set_instantiating_module.
	* pt.c (lookup_template_class_1): Likewise.
	(tsubst_function_decl, instantiate_template_1): Likewise.
	(tsubst_friend): Not here.
	* decl.c (grokfndecl): Use set_originating_module.
	(grokvardecl,grokdeclarator): Likewise.
	* name-lookup.c (do_pushtag): Likewise.
	* friend.c (do_friend): Not here.
	* module.cc (set_implicit_module_origin): Rename to ...
	(set_instantiating_module): ... here.
	(set_originating_module): New.
	gcc/testsuite/
	* g++.dg/modules/friend-3.C: New.
	* g++.dg/modules/friend-4_[ab].C: New.

	gcc/cp/
	* cp-tree.h (get_module_owner): Delete.
	(get_instantiating_module_decl, get_instantiating_module): Declare.
	* module.cc (get_instantiating_module_decl)
	(get_instantiating_module): New.
	(dumper::impl::nested_name, trees_out::tree_node)
	(trees_out::tree_decl, depset::hash::add_specializations)
	(set_module_owner): Use them.
	(get_module_owner): Delete.

	gcc/cp/
	* cp-tree.h (get_declared_module_origin): Delete.
	(get_originating_module, get_originating_module_decl): Declare.
	* module.cc (get_originating_module_decl): New.
	(get_originating_module): New.
	(module_state::write_cluster, module_visible_instantiation_path): Use
	get_originating_module.
	* module.cc (module_state::write_unnamed)
	(lazy_load_specializations): Use get_originating_module_decl.
	* error.c (dump_module_suffix): Use get_originating_module.
	* mangle.c (maybe_write_module): Likewise.
	* name-lookup.c (init_global_partition): Use
	get_originating_module.
	(name_lookup::search_adl): Use get_originating_module_decl.
	* pt.c (lookup_template_class_1): Propagate DECL_MODULE_EXPORT_P.

2019-09-26  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (DECL_MODULE_OWNER): Restrict to
	var/fn/type/template/namespace.
	(MAYBE_DECL_MODULE_EXPORT_P): Delete.
	({set,get}_{declared,implicit}_module_origin): Declare.
	(module_name): Delete and adjust.
	* modules.cc: Adjust throughout for loss of
	MAYBE_DECL_MODULE_EXPORT_P.  Use get_module_owner more.
	(fixup_unscoped_enum_owner): Delete.
	* class.c (layout_class_type): Use set_implicit_module_origin.
	* decl.c (duplicate_decls): Use get_module_owner.
	(finish_enum_value_list): Set DECL_MODULE_EXPORT_P directly.
	* decl2.c (no_linkage_error): Use DECL_MODULE_OWNER.
	* error.c (dump_module_suffix): Reimplement.
	* mangle.c (maybe_write_module): Adjust.
	* name-lookup.c (init_global_partition): Adjust.
	(name_lookup::search_adl): Owner always has module.
	(do_pushdecl): Adjust namespace exporting.
	(do_nonmember_using_decl): Adjust exporting check.
	* pt.c (build_template_decl): Only propagate module info when
	needed.
	(lookup_template_class_1): Use set_implicit_module_origin.
	(tsubst_friend_function): Propagate to outer template.
	(tsubst_function_decl): Use set_implicit_module_origin.
	(tsubst_template_decl): Simplify tsubst if cascade.  Propagate
	inner module info.
	(instantiate_template_1): Use set_module_owner.
	* ptree.c (cxx_print_decl): Protect module info display.
	gcc/testsuite/
	* g++.dg/modules/friend-1_a.C: Adjust scans.
	* g++.dg/modules/indirect-[13]_[bc].C: Likewise.
	* g++.dg/modules/indirect-4_b.C: Likewise.
	* g++.dg/modules/late-ret-3_a.H: Likewise.
	* g++.dg/modules/scc-1.C: Likewise.
	* g++.dg/modules/vmort-2_[abc].C: Likewise.

2019-09-25  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (enum merge_kind): Rearrange.
	(merge_kind_name): Adjust.
	gcc/testsuite/
	* g++.dg/modules/inst_-[234]-[ab].C: Adjust scans.
	* g++.dg/modules/indirect-[234]_b.C: Likewise.

2019-09-24  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* modules.cc (trees_out::tree_decl): RESULT and LABEL decls
	written by value.  Assert only expected things remain by name.

	gcc/cp/
	* modules.cc (enum tree_tag): Add tt_data_member.
	(trees_out::tree_decl): Use it for consts and fields.
	(trees_in::tree_node): Read it.
	(set_implicit_module_owner): Delete.
	* name-lookup.c (get_field_ident, lookup_field_ident): New.
	* name-lookup.h (get_field_ident, lookup_field_ident): Declare.
	* cp-tree.h (set_implicit_module_owner): Delete.
	gcc/testsuite/
	* g++.dg/modules/class-3_[bd].C: Adjust scans.
	* g++.dg/modules/indirect-1_c.C: Likewise.

2019-09-23  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (depset): Add DB_BOTH_SPEC_BIT.
	(specialization_add): Accept template aliases for !decl_p.
	(depset::hash::add_specializations): Notice duplicate
	specialization paths.

2019-09-20  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* decl.c (fixup_anonymous_aggr): Clear LAZY flags, no need to
	strip out fns.
	* module.cc (module_state::lazy_load): Distinguish out of order
	from failure to set slot.
	* name-lookup.c (get_binding_or_decl): Fixme :(
	gcc/testsuite/
	* g++.dg/modules/anon-2{,_[ab]}.[hHC]: New.

2019-09-19  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (enum merge_kind): Add MK_{decl,type}_tmpl_spec,
	MK_type_partual_spec.
	(tree_in::tree_value): Process them.
	(trees_{in,out}::key_mergeable): Stream them.
	* pt.c (match_mergeable_specialization): Only store if spec !=
	NULL.
	gcc/testsuite/
	* g++.dg/modules/tpl-tpl-merge-[12]{,_[ab].[hHC]: New.

	gcc/cp/
	* module.cc (slurping::slurping): Init current to mostpos - 1.
	(module_state::read): Increment slurp->current when done.

	gcc/cp/
	* module.cc (trees_in::tree_node): Check overrun more.

2019-09-18  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_in::is_matching_decl): Copy
	DECL_TEMPLATE_INSTANTIATED.
	gcc/testsuite/
	* g++.dg/modules/inst-5_[ab].[CH]: New.

	gcc/cp/
	* module.cc (trees_in::mergeables): Vec of intptr_t.
	(trees_in::register_mergeable): Return index.
	(trees_in::unmatched_mergeable): New.
	(trees_in::get_dupness): Drop last parm.  Return DUP_bad as
	necessary.  Adjust callers.
	(trees_in::tree_value): Call unmatched_mergeable as necessary.

	gcc/cp/
	* module.cc (trees_in): Delete skip_defns & handling.  Add
	any_deduping field.
	(trees_in::register_mergeable): Outline.
	(trees_in::{enum dupness,get_dupness}): New.
	(trees_in::{enum odrness,get_odrness}): New.
	(trees_in::lookup_mergeable): Delete.
	(trees_in::is_existing_mergeable): Delete, use get_dupness.
	(trees_in::is_skippable_defn): Delete, ise get_odrness.
	(trees_in::assert_definition): Adjust.
	(trees_in::read_{function,class,var,enum}_def): Adjust.
	(topmost_decl): Delete.
	gcc/testsuite/
	* g++.dg/modules/part-3_c.C: Adjust scans.
	* g++.dg/modules/tdef-6_b.C: Adjust scans.

2019-09-17  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (trees_in::is_skippable_defns): Defns always complete
	incomplete.
	gcc/testsuite/
	* g++.dg/modules/merge-3_[ab].[CH]: New.

2019-09-16  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.cc (depset::DB_TYPE_SPEC_BIT): New.
	(depset::is_type_spec): New.
	(enum merge_kind): Replace MK_spec with MK_decl_spec, MK_type_spec.
	(merge_kind_name): Update.
	(trees_in::tree_value): Partition MK_spec handling.
	(trees_{in,out}::key_mergeable): Likewise.
	(depset::hash::add_specialization): Set DB_TYPE_SPEC_BIT.
	gcc/testsuite/
	* g++.dg/modules/indirect-[234]_b.C: Update lang dump scans.
	* g++.dg/modules/inst-[234]_[ab].C: Update lang dump scans.

	gcc/cp/
	* module.cc (spec_tuple): Delete type.
	(specialization_add): Adjust data type.
	(depset::hash::add_specializations): Drop PARTITIONS parm. Adjust.
	(module_state::write): Adjust.

	gcc/cp/
	* cp-tree.h (check_mergeable_specialization): Declare.
	(match_mergeable_specialization): Add DECL_P parm, drop INSERT_P parm.
	* module.cc (trees_in::tree_value): Adjust
	match_mergeable_spcialization calls.
	(specialization_add): Use check_mergeable_specializatio.
	* pt.c (check_mergeable_specialization): New.
	(match_mergeable_specialization): Always insert, reorder parms.

	gcc/cp/
	* module.cc (enum merge_kind): Add MK_linkage.
	(merge_kind_name): ... and here.
	(trees_in::tree_value): Add it.
	(trees_{in,out}::key_mergeable): Use it.
	* name-lookup.c (match_mergeable_decl): Don't add anon-enum.
	gcc/testsuite/
	* g++.dg/modules/builtin-1_a.C: Adjust scan.
	* g++.dg/modules/indirect-[234]_b.C: Likewise.
	* g++.dg/modules/inst-[23]_a.C: Likewise.
	* g++.dg/modules/tdef-6_[ab].[HC]: New.

2019-09-15  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* module.